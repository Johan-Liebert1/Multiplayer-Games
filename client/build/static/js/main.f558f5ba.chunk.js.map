{"version":3,"sources":["animations/animations.ts","types/games.ts","components/allGames/GameOverComponent.tsx","helpers/globalHelpers.ts","classes/checkers/CheckersPiece.ts","components/allGames/Cell.tsx","components/checkers/CheckersTest.tsx","components/chess/ChessTest.tsx","types/store/actionNames.ts","components/checkers/RenderCheckersBoard.tsx","classes/checkers/CheckersGame.ts","helpers/checkersBoard.ts","config/axiosConfig.ts","hooks/useTypedSelector.ts","components/checkers/CheckersPlayBoard.tsx","classes/checkers/CheckersAnalysis.ts","styles/gameScreenStyles.ts","hooks/useWindowSize.ts","classes/chess/ChessPiece.ts","classes/chess/Pawn.ts","classes/chess/Rook.ts","classes/chess/Knight.ts","classes/chess/Bishop.ts","classes/chess/King.ts","classes/chess/Queen.ts","helpers/chessHelpers.ts","types/chessTypes.ts","classes/chess/ChessGame.ts","components/chess/PawnPromotionDialog.tsx","components/chess/RenderChessBoard.tsx","components/chess/ChessPlayBoard.tsx","helpers/chessParsers.ts","classes/chess/AnalysisBoard.ts","types/socketEvents.ts","components/allGames/Chat.tsx","store/actions/socketActions.ts","components/checkers/CheckersBoard.tsx","components/chess/ChessBoard.tsx","components/sketchio/CanvasComponent.tsx","helpers/updateGameDetails.ts","components/Svg.tsx","components/allGames/RoomId.tsx","hooks/useUserPresent.ts","views/CheckersScreen.tsx","store/actions/userActions.ts","views/ChessScreen.tsx","components/GameCard.tsx","views/GamesScreen.tsx","classes/sketchio/SketchIO.ts","views/SketchIOScreen.tsx","components/user/CircularGraph.tsx","views/Statistics.tsx","styles/UserLoginStyles.ts","views/UserLogin.tsx","components/user/ProfilePic.tsx","components/user/UserDetails.tsx","views/UserProfileScreen.tsx","views/UserRegister.tsx","routes/router.ts","components/Dropdown.tsx","components/NavBar.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/combinedReducers.ts","store/reducers/socketReducers.ts","store/store.ts","helpers/storeHelpers.ts","index.tsx"],"names":["gameOverDiv","hidden","scale","show","transition","duration","exit","CELL_SIZE","GameOverComponent","winnerColor","winnerName","useState","hideDiv","setHideDiv","style","width","height","display","justifyContent","alignItems","zIndex","position","top","left","AnimatePresence","motion","div","onClick","backgroundColor","flexDirection","boxShadow","borderRadius","justifySelf","alignSelf","variants","initial","animate","color","toUpperCase","slice","length","getWinnerColor","Button","variant","getStr","r","c","getEmptyMatrix","size","Array","fill","map","CheckersPiece","pos","row","col","isKing","oppColor","currentRow","currentCol","moves","makeKing","setRowCol","getCaptuingMoves","board","rowAdders","rowCheck","colAdders","colCheck","forEach","ra","raIdx","ca","caIdx","pRow","pCol","rCheck","cCheck","piece","capturing","validMoves","this","Cell","game","image","isClicked","blueDot","redDot","boardRef","userChessColor","userCheckersColor","testBoard","showMoves","cellRef","useRef","bgColor","imgDim","divStyles","padding","margin","innerDivStyles","imgStyle","dotStyle","border","transform","onMouseDown","ref","img","src","window","location","origin","alt","whileHover","cursor","drag","dragConstraints","dragElastic","dragMomentum","dragTransition","bounceStiffness","bounceDamping","onDragEnd","event","x","clientX","y","clientY","current","boardRect","getBoundingClientRect","row1","Math","floor","abs","col1","dragEnded","defaultProps","analysisBoard","ActionNames","RenderCheckersBoard","checkersBoardRef","userPieceColor","movePiece","ri","_col","ci","CheckersGame","cellsClicked","numClicks","turn","selected","redPiecesOnBoard","whitePiecesOnBoard","gameOver","winner","gameMoves","clearDots","i","j","showDots","Object","entries","key","split","Number","showValidMoves","userColor","cell","pieceMoves","select","rows","push","cols","str","validPieceMoves","generateGameMove","clickedCells","capturingMove","move","rf","cf","capturedPiecePos","wasCapturingMove","getMoves","rowi","rowf","coli","colf","actualMove","capturedPiece","tcc","changeTurn","colorHasMovesLeft","keys","redWins","whiteWins","isGameOver","getNewCheckersBoard","tempBoard","e","axiosInstance","axios","create","baseURL","process","headers","useTypedSelector","useSelector","CheckersPlayBoard","user","state","setBoard","setGameOver","setUserPieceColor","marginLeft","id","b","username","newGameOverObject","data","JSON","stringify","player1","player2","console","log","post","then","resp","CheckersAnalysis","moveList","movesList","currentMove","playNextMove","moveToPlay","wrapperDivStyles","minHeight","flexWrap","boardStyles","chatStyles","roomIdInputStyles","makeStyles","theme","root","chatBoxStyles","marginTop","messagesContainer","maxHeight","overflow","inputContainer","borderBottomColor","borderTop","listClass","t","listItem","listItemClicked","CheckersTestBoard","classes","listStyles","allGamesList","setAllGamesList","analyzingGameId","setAnalyzingGameId","analyzing","setAnalyzing","analyzeGame","gameId","find","g","game_id","apiRespMoves","intermediate","list","getCheckersMovesFromString","minWidth","disabled","className","borderLeft","List","index","ListItem","date","get","games","useWindowSize","innerWidth","innerHeight","setSize","resetWindowSize","preventDefault","useEffect","addEventListener","removeEventListener","ChessPiece","protectingMoves","isBeingAttacked","pieceName","kingParameters","getCellsBetweenPieces","kingPos","checkIfKingInCheck","whiteKingInCheck","blackKingInCheck","whiteKingPos","pieceCheckingWhiteKing","handleKingInCheck","pieceCheckingKing","blackKingPos","pieceCheckingBlackKing","newValidMoves","cellsBetweenPieces","handlePiecePinnedByRook","colAdder","isPinned","column","rowAdder","handlePiecePinnedByBishop","kingRow","kingCol","pinningPiece","cellsBetweenKingAndPinningPiece","resetMoves","Pawn","hasMoved","potentialCapturingMoves","setHasMoved","adder","potentialCapture","Rook","Knight","arrC","arrR","Piece","Bishop","upperRight","lowerRight","upperLeft","lowerLeft","King","canCastleLeft","canCastleRight","invalidMoves","notAllowKingToMoveToAttackedCell","newInvalidMoves","cellsUnderAttackByWhite","cellsUnderAttackByBlack","cellsUnderAttack","moveKeys","otherKeys","moveAllowed","isPathBetweenRookAndKingBlocked","rookColor","blockedPath","leftBlocked","rightBlocked","isRookPresent","leftRook","rightRook","addCastlingMoves","handleKingInCheckByRook","rookSquares","cm","handleKingInCheckByBishop","bishopSquares","handleKingInCheckByQueen","genericKingParams","rowsArray","obj","Queen","rook","bishop","rooks","bishops","rm","bm","getNewChessBoard","pieceNamesToLetter","pawn","knight","queen","king","waysToDraw","freeze","STALEMATE","INSUFFICIENT_PIECES","ChessGame","kingParams","piecePoints","whitePiecesValue","blackPiecesValue","blackPiecesOnBoard","allGameMoves","pgn","movesString","initialPieces","setKingParams","k","handlePawnPromotion","changePawnToPiece","promoteTo","promotePawn","generateMoveString","promoted","promotedTo","setInitiallyAttackedCells","setKingInCheck","kingColor","lastMovedPiece","attackedCells","totalMoves","getAllMoves","pawnPromoted","moveStr","similarMoveByAnotherPiece","generatePgn","movedPiece","moveNumber","wasPieceCaptured","castling","promotion","movePgn","castled","side","colNamef","String","fromCharCode","rowNamef","colNamei","letter","castlingDone","castleSide","castleKing","ceil","rookCol","blackWins","draw","how","PawnPromotionDialog","pawnColor","handleClick","RenderChessBoard","chessBoardRef","ChessPlayBoard","setGameStarted","showPawnPromotionDialog","setShowPawnPromotionDialog","dragHasEnded","eleRect","targetRect","target","tagName","pieceColor","imgSrc","getAttribute","possibleNames","lastIndexOf","putPieceOnBoard","toLowerCase","trim","resetBoard","empty","btnStyles","bg","buttons","text","clickHandler","setTimeout","fenHelp","fen","emptyColsPlaced","emptyCols","generateFenFromBoard","background","objectFit","backgroundSize","returnedValue","right","bottom","btn","idx","AnalysisBoard","promotionMoveIndices","ChessBoardTest","potentialRows","potentialCols","includes","getChessMovesFromString","socketEmitEvents","USER_PLAYED_A_MOVE","JOIN_A_ROOM","SENT_CHAT_MESSAGE","CHECKERS_GAME_OVER","PAWN_PROMOTED","CASTLED","CHESS_GAME_OVER","BEGAN_PATH","STROKED_PATH","STARTED_FILLING","START_SKETCHIO_GAME","socketListenEvents","OPPONENT_PLAYED_A_MOVE","CHESS_COLOR_SELECTED","CHESS_PLAYER_2_JOINED","OPPONENT_PROMOTED_PAWN","OPPONENT_CASTLED","CHECKERS_COLOR_SELECTED","CHECKERS_PLAYER_2_JOINED","SKETCH_IO_GAME_OVER","SKETCHIO_PLAYER_JOINED","NEW_PAINTER_SELECTED","RECEIVE_CHAT_MESSAGE","USER_DISCONNECTED","Chat","socket","messageText","setMessageText","messageList","setMessageList","on","chatMessage","m","emit","dense","msg","wordBreak","marginRight","message","FormControl","InputLabel","htmlFor","FilledInput","fullWidth","value","onChange","onKeyPress","newMessage","chatColor","sendMessage","sketchIO","setSocketAction","dispatch","type","SET_SOCKET","payload","updateGameDetailsApiCall","object","won","lost","drawn","started","url","CheckersBoard","roomId","useDispatch","player2Name","setPlayer2Name","io","users","filter","gameOverObject","svgNames","copyIcon","paintFill","svgs","focusable","viewBox","tabIndex","outline","d","SVG","svgName","RoomId","roomIdElement","roomIdStyles","defaultValue","readOnly","endAdornment","InputAdornment","IconButton","querySelector","document","execCommand","edge","useUserPresent","history","CheckersScreen","match","bigScreen","params","maxWidth","userLoginAction","userData","a","login","success","USER_LOGIN","updateProfilePicAction","profilePictureUrl","UPDATE_USER_PROFILE_PICTURE","withRouter","UPDATE_USER_SOCKET_DETAILS","windowSize","ChessScreen","useStyles","actionArea","media","gameName","modalOpen","setModalOpen","setRoomId","enterButtonDisabled","setEnterButtonDisabled","toggleModal","imageUrl","newClasses","borderColor","Card","CardActionArea","CardMedia","title","CardContent","Typography","gutterBottom","component","CardActions","to","uuid","textDecoration","DialogTitle","DialogContent","OutlinedInput","required","labelWidth","DialogActions","opacity","GamesScreen","SketchIO","canvas","context","ctx","initialFillStyle","initialStrokeStyle","isPainting","isFilling","toggleFillPaint","getPainting","getFilling","fillStyle","fillRect","setInitialStyles","strokeStyle","changeCanvasColor","beginPath","moveTo","drawPath","lineTo","stroke","onMouseMove","offsetX","offsetY","handleCanvasClick","setPaintingTrue","setPaintingFalse","enableCanvas","disableCanvas","windowWidth","windowHeight","paintFillButton","canvasContainer","canvasRef","canvasDimensions","setCanvasDimensions","points","playersInRoom","setPlayersInRoom","currentPainter","setCurrentPainter","gameStarted","isUserPainter","setIsUserPainter","newPainter","offsetWidth","getElementById","getContext","setCanvasCursor","allUsersInRoom","marginBottom","newWord","player","borderBottom","room_id","innerText","SketchIOScreen","CircularGraph","percentage","circle","Box","CircularProgress","toFixed","createStyles","inline","getUserData","chess","games_won","chess_info","games_lost","games_drawn","games_started","checkers","checkers_info","Statistics","statistics","setStatistics","stats","capitalize","word","join","getColor","gameStatsObject","subheader","ListSubheader","fontSize","fontWeight","ListItemAvatar","ListItemText","primary","secondary","Divider","paper","avatar","spacing","palette","main","form","submit","borderWidth","paddingTop","paddingBottom","formGroup","withoutLabel","textField","icon","UserLogin","showPassword","setShowPassword","password","formDetails","setFormDetails","handleChange","token","routes","routeNames","GAMES_SCREEN","path","loginUser","Container","CssBaseline","Avatar","noValidate","autoComplete","FormHelperText","error","Visibility","VisibilityOff","ProfilePic","navbar","useMoreStyles","editIconContainer","editIcon","UserDetails","isForRegister","userInfo","submitHandler","moreClasses","confirm","wasUsernameChanged","setWasUsernameChanged","confirmPassword","firstName","lastName","email","passwordsMatch","setPasswordsMatch","registerUser","input","createElement","setAttribute","click","onchange","selectedFile","files","formData","FormData","append","name","config","Authorization","response","UserProfileScreen","editUserInfo","put","createRequest","UserRegister","LOGIN","REGISTER","PROFILE","STATISTICS","CHECKERS_SCREEN","CHESS_SCREEN","SKETCHIO_SCREEN","CHECKERS_TEST","CHESS_TEST","CHESS_PLAY","CHECKERS_PLAY","dropdownItems","close","item","pathname","showProfileModal","setShowProfileModal","showDropdown","setShowDropdown","closeDropdown","old","chessDropdownItems","checkersDropdownItems","unshift","USER_LOGOUT","App","values","route","exact","render","routeProps","initialState","combinedReducers","combineReducers","action","localStorage","setItem","clear","getItem","parse","getFromLocalStorage","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.f558f5ba.chunk.js","sourcesContent":["export const gameOverDiv = {\r\n\thidden: {\r\n\t\tscale: 0\r\n\t},\r\n\r\n\tshow: {\r\n\t\tscale: 1,\r\n\t\ttransition: {\r\n\t\t\tduration: 0.3\r\n\t\t}\r\n\t},\r\n\r\n\texit: {\r\n\t\tscale: 0,\r\n\t\ttransition: {\r\n\t\t\tduration: 0.3\r\n\t\t}\r\n\t}\r\n};\r\n","export type Games = \"chess\" | \"checkers\" | \"sketchio\";\nexport type MoveType = \"valid\" | \"capturing\";\nexport type ClickedCellsType = { rows: number[]; cols: number[] };\nexport const CELL_SIZE = 65;\n\nexport interface UpdateGameDetails {\n  won: boolean;\n  lost: boolean;\n  drawn: boolean;\n  started: boolean;\n}\n","import React, { useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { gameOverDiv } from \"../../animations/animations\";\nimport { ChessPieceColor } from \"../../types/chessTypes\";\nimport { CheckersPieceColor } from \"../../types/checkersTypes\";\nimport { Button } from \"@material-ui/core\";\nimport { CELL_SIZE } from \"../../types/games\";\n\ninterface GameOverComponentProps {\n  winnerColor: ChessPieceColor | CheckersPieceColor;\n  winnerName: string;\n}\n\nconst GameOverComponent: React.FC<GameOverComponentProps> = ({\n  winnerColor,\n  winnerName\n}) => {\n  const [hideDiv, setHideDiv] = useState(false);\n\n  const getWinnerColor = () => {\n    let color = \"\";\n    color += winnerColor[0].toUpperCase();\n    color += winnerColor.slice(1, winnerColor.length);\n\n    return color;\n  };\n\n  return (\n    <div\n      style={{\n        width: CELL_SIZE * 8 + \"px\",\n        height: CELL_SIZE * 8 + \"px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        zIndex: 900,\n        position: \"absolute\",\n        top: 0,\n        left: 0\n      }}\n    >\n      <AnimatePresence>\n        <motion.div\n          onClick={() => setHideDiv(true)}\n          style={{\n            height: \"300px\",\n            width: \"300px\",\n            backgroundColor: \"#02203A\",\n            zIndex: 99,\n            display: hideDiv ? \"none\" : \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n            boxShadow: \"0 0 20px grey\",\n            borderRadius: \"1rem\",\n            justifySelf: \"center\",\n            alignSelf: \"center\"\n          }}\n          variants={gameOverDiv}\n          initial=\"hidden\"\n          animate=\"show\"\n          exit=\"exit\"\n        >\n          <h2 style={{ color: winnerColor }}>\n            {winnerName} ({getWinnerColor()}) Won\n          </h2>\n\n          <Button\n            variant=\"contained\"\n            style={{ backgroundColor: \"#2980B9\", color: \"white\" }}\n          >\n            Rematch\n          </Button>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\nexport default GameOverComponent;\n","import { CheckersMoveType } from \"../types/checkersTypes\";\nimport { ChessPieceName, PiecePosition } from \"../types/chessTypes\";\nimport { ClickedCellsType } from \"../types/games\";\n\nexport const getStr = (r: number, c: number) => `${r},${c}`;\nexport const getRowCol = (str: string) => str.split(\",\").map(Number);\n\nexport const getEmptyMatrix = (size: number) =>\n  new Array(size).fill(0).map(() => new Array(size).fill(0));\n\nexport const getChessMovesFromString = (\n  apiRespMoves: string\n): {\n  moves: ClickedCellsType[];\n  promotionMoveIndices: { [key: number]: ChessPieceName };\n} => {\n  const moves: ClickedCellsType[] = [];\n  const promotionMoveIndices: { [key: number]: ChessPieceName } = {};\n\n  //6,4;3,3:1,3;4,4:4,3;3,4:1,2;5,5:3,2;4,5=queen:0,2;6,5:7,5;1,2:0,4;5,1:7,5;3,3:0,0;4,6:7,3;2,6:4,5;1,2:\n\n  const intermediate = apiRespMoves.split(\":\");\n\n  for (let i = 0; i < intermediate.length - 1; i++) {\n    const potentialRows = intermediate[i].split(\";\")[0];\n    let potentialCols = intermediate[i].split(\";\")[1];\n\n    if (potentialCols.includes(\"=\")) {\n      // pawn promotion\n      promotionMoveIndices[i] = potentialCols.split(\"=\")[1] as ChessPieceName;\n\n      potentialCols = potentialCols.split(\"=\")[0];\n    }\n\n    const rows = potentialRows.split(\",\").map(Number);\n    const cols = potentialCols.split(\",\").map(Number);\n\n    moves.push({ rows, cols });\n  }\n\n  return { moves, promotionMoveIndices };\n};\n\nexport const getCheckersMovesFromString = (apiRespMoves: string): ClickedCellsType[] => {\n  const moves: ClickedCellsType[] = [];\n\n  //6,4;3,3:1,3;4,4:4,3;3,4:1,2;5,5:3,2;2;5;4,5:0,2;6,5:\n\n  const intermediate = apiRespMoves.split(\":\");\n\n  for (let i = 0; i < intermediate.length - 1; i++) {\n    const list = intermediate[i].split(\";\");\n\n    const rows = list[0].split(\",\").map(Number);\n    const cols = list[1].split(\",\").map(Number);\n\n    moves.push({ rows, cols });\n  }\n\n  return moves;\n};\n","import { getStr } from \"../../helpers/globalHelpers\";\r\nimport {\r\n  CheckersBoardType,\r\n  CheckersMoveType,\r\n  CheckersPieceColor\r\n} from \"../../types/checkersTypes\";\r\n\r\nexport default class CheckersPiece {\r\n  color: CheckersPieceColor;\r\n  row: number;\r\n  col: number;\r\n  isKing: boolean;\r\n  oppColor: CheckersPieceColor;\r\n  currentRow: number;\r\n  currentCol: number;\r\n  moves: CheckersMoveType;\r\n\r\n  constructor(color: CheckersPieceColor, pos: number[]) {\r\n    this.color = color;\r\n    this.isKing = false;\r\n    this.row = pos[0];\r\n    this.col = pos[1];\r\n    this.oppColor = this.color === \"red\" ? \"white\" : \"red\";\r\n    this.currentRow = pos[0];\r\n    this.currentCol = pos[1];\r\n    this.moves = {};\r\n  }\r\n\r\n  makeKing = () => (this.isKing = true);\r\n\r\n  setRowCol = (row: number, col: number) => {\r\n    this.currentRow = row;\r\n    this.currentCol = col;\r\n\r\n    if (this.row < 2) {\r\n      if (this.currentRow === 7) {\r\n        this.makeKing();\r\n      }\r\n    } else {\r\n      if (this.currentRow === 0) {\r\n        this.makeKing();\r\n      }\r\n    }\r\n  };\r\n\r\n  getCaptuingMoves = (board: CheckersBoardType): void => {\r\n    let rowAdders: number[];\r\n    const colAdders: number[] = [2, -2];\r\n\r\n    // indices where we'll check if a piece of opposite color exists or not\r\n    let rowCheck: number[];\r\n    const colCheck: number[] = [1, -1];\r\n\r\n    if (this.row < 2) {\r\n      // row can only increase\r\n      rowAdders = [2];\r\n      rowCheck = [1];\r\n    } else {\r\n      // row can only decrease\r\n      rowAdders = [-2];\r\n      rowCheck = [-1];\r\n    }\r\n\r\n    if (this.isKing) {\r\n      // row can increase and decrease\r\n      rowAdders = [2, -2];\r\n      rowCheck = [1, -1];\r\n    }\r\n\r\n    rowAdders.forEach((ra, raIdx) => {\r\n      if (this.currentRow + ra >= 0 && this.currentRow + ra < board.length) {\r\n        colAdders.forEach((ca, caIdx) => {\r\n          if (this.currentCol + ca >= 0 && this.currentCol + ca < board[0].length) {\r\n            // we're within bounds\r\n\r\n            // the potential move\r\n            const pRow = this.currentRow + ra;\r\n            const pCol = this.currentCol + ca;\r\n\r\n            // potential move square needs to be empty\r\n            if (board[pRow][pCol] === 0) {\r\n              // gotta check if a piece exists at this position\r\n              const rCheck = this.currentRow + rowCheck[raIdx];\r\n              const cCheck = this.currentCol + colCheck[caIdx];\r\n              const piece = board[rCheck][cCheck];\r\n\r\n              if (piece instanceof CheckersPiece) {\r\n                // piece exists, now we check if it's color is the opposite color or not\r\n                if (piece.color === this.oppColor) {\r\n                  // can capture the piece\r\n                  this.moves[getStr(pRow, pCol)] = {\r\n                    capturing: {\r\n                      row: rCheck,\r\n                      col: cCheck\r\n                    }\r\n                  };\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  validMoves = (board: CheckersBoardType) => {\r\n    this.moves = {};\r\n\r\n    let rowAdders: number[];\r\n    let colAdders: number[] = [1, -1];\r\n\r\n    if (this.row < 2) {\r\n      // row can only increase\r\n      rowAdders = [1];\r\n    } else {\r\n      // row can only decrease\r\n      rowAdders = [-1];\r\n    }\r\n\r\n    if (this.isKing) {\r\n      // row can increase and decrease\r\n      rowAdders = [1, -1];\r\n    }\r\n\r\n    for (let r = 0; r < rowAdders.length; r++) {\r\n      const ra = rowAdders[r];\r\n\r\n      if (this.currentRow + ra >= 0 && this.currentRow + ra < board.length) {\r\n        for (let c = 0; c < colAdders.length; c++) {\r\n          const ca = colAdders[c];\r\n\r\n          if (this.currentCol + ca >= 0 && this.currentCol + ca < board[0].length) {\r\n            // the space on board needs to be empty\r\n            const pRow = this.currentRow + ra;\r\n            const pCol = this.currentCol + ca;\r\n\r\n            if (board[pRow][pCol] === 0) {\r\n              this.moves[getStr(pRow, pCol)] = \"valid\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.getCaptuingMoves(board);\r\n\r\n    return this.moves;\r\n  };\r\n}\r\n","import React, { useRef } from \"react\";\nimport { CELL_SIZE, Games } from \"../../types/games\";\nimport { motion, PanInfo } from \"framer-motion\";\nimport { ChessPieceColor } from \"../../types/chessTypes\";\nimport { CheckersPieceColor } from \"../../types/checkersTypes\";\n\ninterface CellProps {\n  game: Games;\n  image: string;\n  row: number;\n  col: number;\n  color: string;\n  isClicked?: boolean;\n  blueDot: boolean;\n  testBoard?: boolean;\n  redDot?: boolean;\n  boardRef?: React.MutableRefObject<HTMLDivElement | null>;\n  userChessColor?: ChessPieceColor;\n  userCheckersColor?: CheckersPieceColor;\n  showMoves: (row: number, col: number) => void;\n}\n\nconst Cell: React.FC<CellProps> = ({\n  game,\n  image,\n  row,\n  col,\n  color,\n  isClicked,\n  blueDot,\n  redDot,\n  boardRef,\n  userChessColor,\n  userCheckersColor,\n  testBoard,\n  showMoves\n}) => {\n  const cellRef = useRef<HTMLDivElement | null>(null);\n\n  const bgColor = isClicked ? \"rgba(240, 147, 43, 0.5)\" : null;\n  const imgDim = game === \"chess\" ? 65 : 40;\n\n  const divStyles: React.CSSProperties = {\n    width: CELL_SIZE,\n    height: CELL_SIZE,\n    backgroundColor: color,\n    padding: 0,\n    margin: 0,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"relative\"\n  };\n\n  const innerDivStyles: React.CSSProperties = {\n    backgroundColor: bgColor ? bgColor : \"transparent\",\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"relative\",\n    boxShadow: redDot ? \"inset 0px 0px 20px 5px rgb(255, 0, 0)\" : \"\"\n  };\n\n  const imgStyle: React.CSSProperties = {\n    height: imgDim,\n    width: imgDim,\n    zIndex: 500\n  };\n\n  const dotStyle: React.CSSProperties = {\n    borderRadius: \"50%\",\n    border: `3px solid ${blueDot && \"rgb(41, 128, 185)\"}`,\n    backgroundColor: `${blueDot && \"rgb(41, 128, 185)\"}`,\n    height: 20,\n    width: 20,\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\"\n  };\n\n  const handleCellClick = () => {\n    showMoves(row, col);\n  };\n\n  const dragEnded = (event: MouseEvent | TouchEvent | PointerEvent) => {\n    const { clientX: x, clientY: y } = event as MouseEvent;\n\n    if (boardRef?.current) {\n      const boardRect = boardRef.current.getBoundingClientRect();\n\n      const row1 = Math.floor(Math.abs(boardRect.top - y) / CELL_SIZE);\n      const col1 = Math.floor(Math.abs(boardRect.left - x) / CELL_SIZE);\n\n      if (testBoard) {\n        showMoves(row1, col1);\n        return;\n      }\n\n      if (userChessColor) {\n        switch (userChessColor) {\n          case \"white\":\n            showMoves(row1, col1);\n            break;\n\n          case \"black\":\n            showMoves(Math.abs(7 - row1), col1);\n            break;\n        }\n      } else if (userCheckersColor) {\n        switch (userCheckersColor) {\n          case \"red\":\n            showMoves(row1, col1);\n            break;\n\n          case \"white\":\n            showMoves(Math.abs(7 - row1), col1);\n            break;\n        }\n      }\n    }\n  };\n\n  return (\n    <div onMouseDown={handleCellClick} style={divStyles} ref={cellRef}>\n      <div style={innerDivStyles}>\n        {(blueDot || redDot) && <div style={dotStyle}></div>}\n        {image && (\n          <motion.img\n            src={window.location.origin + \"/\" + image}\n            style={imgStyle}\n            alt={image}\n            whileHover={{ cursor: \"grab\" }}\n            drag\n            dragConstraints={cellRef}\n            dragElastic={1}\n            dragMomentum={false}\n            dragTransition={{ bounceStiffness: 600, bounceDamping: 30 }}\n            onDragEnd={event => dragEnded(event)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nCell.defaultProps = {\n  testBoard: false\n};\n\nexport default Cell;\n","// react stuff\nimport React, { useState, useEffect, useRef } from \"react\";\n\n// components\nimport GameOverComponent from \"../allGames/GameOverComponent\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport RenderCheckersBoard from \"./RenderCheckersBoard\";\n\n// checkers\nimport CheckersAnalysis from \"../../classes/checkers/CheckersAnalysis\";\n\n// types\nimport { CheckersBoardType, CheckersPieceColor } from \"../../types/checkersTypes\";\nimport { RouteProps } from \"../../types/routeProps\";\nimport { getNewCheckersBoard } from \"../../helpers/checkersBoard\";\nimport { CELL_SIZE } from \"../../types/games\";\nimport { Button, List, ListItem, makeStyles } from \"@material-ui/core\";\nimport { chatBoxStyles } from \"../../styles/gameScreenStyles\";\nimport { axiosInstance } from \"../../config/axiosConfig\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { getCheckersMovesFromString } from \"../../helpers/globalHelpers\";\n\nlet analysisBoard: CheckersAnalysis;\n\ninterface GameListItem {\n  player1: string;\n  player2: string;\n  moves: string;\n  date: string;\n  game_id: number;\n}\n\ninterface CheckersBoardProps extends RouteProps {}\n\nconst listClass = makeStyles(t => ({\n  listItem: {\n    \"&:hover\": {\n      backgroundColor: \"#0b1622\",\n      color: \"#0984e3\",\n      cursor: \"pointer\"\n    }\n  },\n  listItemClicked: {\n    backgroundColor: \"#0b1622\",\n    color: \"#0984e3\"\n  }\n}));\n\ninterface GameOverState {\n  gameOver: boolean;\n  winnerName: string;\n  winnerColor: CheckersPieceColor;\n}\n\nconst CheckersTestBoard: React.FC<CheckersBoardProps> = () => {\n  const classes = chatBoxStyles();\n  const listStyles = listClass();\n\n  const { user } = useTypedSelector(state => state);\n\n  const [board, setBoard] = useState<CheckersBoardType>(() => getNewCheckersBoard());\n  const [allGamesList, setAllGamesList] = useState<GameListItem[]>([]);\n  const [analyzingGameId, setAnalyzingGameId] = useState<number>(-1);\n  const [analyzing, setAnalyzing] = useState(false);\n\n  const [gameOver, setGameOver] = useState<GameOverState>({\n    gameOver: false,\n    winnerName: \"\",\n    winnerColor: \"\" as CheckersPieceColor\n  });\n\n  let [userPieceColor, setUserPieceColor] = useState<CheckersPieceColor>(\"white\");\n\n  const checkersBoardRef = useRef<HTMLDivElement | null>(null);\n\n  const analyzeGame = (gameId: number) => {\n    setAnalyzing(true);\n    setAnalyzingGameId(gameId);\n\n    const game = allGamesList.find(g => g.game_id === gameId);\n\n    setBoard(() => getNewCheckersBoard());\n\n    const moves = getCheckersMovesFromString(game?.moves as string);\n\n    analysisBoard = new CheckersAnalysis(moves);\n  };\n\n  const playMove = () => {\n    const tempBoard = board.map(r => r);\n    analysisBoard.playNextMove(tempBoard);\n    setBoard(tempBoard);\n    return;\n  };\n\n  const getAllCheckersGames = () => {\n    axiosInstance\n      .get(`/games/checkers/${user.username}`)\n      .then(resp => setAllGamesList(resp.data.games));\n  };\n\n  return (\n    <div\n      style={{\n        minWidth: \"100vw\",\n        minHeight: \"92vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <div style={{ minWidth: \"90%\", display: \"flex\" }}>\n        <div id=\"checkersBoard\" style={{ position: \"relative\" }}>\n          {gameOver.gameOver && (\n            <GameOverComponent\n              winnerColor={gameOver.winnerColor}\n              winnerName={gameOver.winnerName}\n            />\n          )}\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: userPieceColor === \"white\" ? \"column\" : \"column\"\n            }}\n            ref={checkersBoardRef}\n          >\n            <RenderCheckersBoard\n              board={board}\n              checkersBoardRef={checkersBoardRef}\n              userPieceColor={userPieceColor}\n              testBoard={true}\n              movePiece={(i: number, j: number) => {\n                return;\n              }}\n            />\n          </div>\n          <div\n            style={{\n              padding: \"0.5rem 0\",\n              display: \"flex\",\n              justifyContent: \"space-evenly\"\n            }}\n          >\n            <Button variant=\"contained\" disabled={!analyzing}>\n              <KeyboardArrowLeftIcon />\n            </Button>\n\n            <Button variant=\"contained\">Analyze</Button>\n\n            <Button variant=\"contained\" onClick={playMove} disabled={!analyzing}>\n              <KeyboardArrowRightIcon />\n            </Button>\n          </div>\n        </div>\n\n        <div\n          className={classes.messagesContainer}\n          style={{\n            height: `${CELL_SIZE * board.length}px`,\n            width: \"100%\",\n            borderLeft: \"0.2rem solid gray\"\n          }}\n        >\n          <List\n            style={{\n              height: `${CELL_SIZE * board.length}px`,\n              display: \"flex\",\n              flexDirection: \"column\",\n              overflow: \"auto\"\n            }}\n          >\n            <div style={{ height: \"90%\" }}>\n              {allGamesList.map((game, index) => (\n                <ListItem\n                  key={game.game_id}\n                  onClick={() => {\n                    analyzeGame(game.game_id);\n                  }}\n                  className={\n                    game.game_id === analyzingGameId\n                      ? listStyles.listItemClicked\n                      : listStyles.listItem\n                  }\n                >\n                  <h5 style={{ width: \"10%\" }}>{index + 1}</h5>\n                  <span style={{ width: \"60%\" }}>\n                    {game.player1} vs {game.player2}\n                  </span>\n                  <span style={{ width: \"30%\" }}>{\"  \" + game.date.split(\"T\")[0]}</span>\n                </ListItem>\n              ))}\n            </div>\n\n            <ListItem style={{ height: \"10%\" }}>\n              <Button variant=\"contained\" onClick={getAllCheckersGames}>\n                Get All Games\n              </Button>\n            </ListItem>\n          </List>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckersTestBoard;\n","// react stuff\nimport React, { useState, useRef } from \"react\";\n\n// gameplay\nimport AnalysisBoard from \"../../classes/chess/AnalysisBoard\";\n\n// types\nimport { ChessBoardType } from \"../../types/chessTypes\";\nimport { CELL_SIZE } from \"../../types/games\";\nimport { RouteProps } from \"../../types/routeProps\";\nimport { getNewChessBoard } from \"../../helpers/chessHelpers\";\nimport { Button, List, ListItem, makeStyles } from \"@material-ui/core\";\nimport { axiosInstance } from \"../../config/axiosConfig\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\n\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\";\nimport { chatBoxStyles } from \"../../styles/gameScreenStyles\";\nimport { getChessMovesFromString } from \"../../helpers/globalHelpers\";\nimport RenderChessBoard from \"./RenderChessBoard\";\n\nlet analysisBoard: AnalysisBoard;\n\ninterface ChessBoardProps extends RouteProps {}\ninterface GameListItem {\n  player1: string;\n  player2: string;\n  moves: string;\n  date: string;\n  game_id: number;\n}\n\nconst listClass = makeStyles(t => ({\n  listItem: {\n    \"&:hover\": {\n      backgroundColor: \"#0b1622\",\n      color: \"#0984e3\",\n      cursor: \"pointer\"\n    }\n  },\n  listItemClicked: {\n    backgroundColor: \"#0b1622\",\n    color: \"#0984e3\"\n  }\n}));\n\nconst ChessBoardTest: React.FC<ChessBoardProps> = () => {\n  const classes = chatBoxStyles();\n  const listStyles = listClass();\n\n  const { user } = useTypedSelector(state => state);\n\n  const [board, setBoard] = useState<ChessBoardType>(() => getNewChessBoard());\n  const [allGamesList, setAllGamesList] = useState<GameListItem[]>([]);\n  const [analyzing, setAnalyzing] = useState(false);\n  const [analyzingGameId, setAnalyzingGameId] = useState<number>(-1);\n\n  const chessBoardRef = useRef<HTMLDivElement | null>(null);\n\n  const analyzeGame = (gameId: number) => {\n    setAnalyzing(true);\n    setAnalyzingGameId(gameId);\n\n    const game = allGamesList.find(g => g.game_id === gameId);\n\n    setBoard(() => getNewChessBoard());\n\n    const { moves, promotionMoveIndices } = getChessMovesFromString(\n      game?.moves as string\n    );\n\n    analysisBoard = new AnalysisBoard(moves, promotionMoveIndices);\n    analysisBoard.setInitiallyAttackedCells(board);\n  };\n\n  const playMove = () => {\n    const tempBoard = board.map(r => r);\n    analysisBoard.playNextMove(tempBoard);\n    setBoard(tempBoard);\n    return;\n  };\n\n  const getAllChessGames = () => {\n    axiosInstance\n      .get(`/games/chess/${user.username}`)\n      .then(resp => setAllGamesList(resp.data.games));\n  };\n\n  return (\n    <div style={{ margin: \"2rem 4rem\", display: \"flex\" }}>\n      <div\n        id=\"checkersBoard\"\n        style={{\n          position: \"relative\",\n          background: \"url(/images/chess/chessBoard.jpg)\",\n          objectFit: \"contain\",\n          backgroundSize: `${CELL_SIZE * board.length}px, ${CELL_SIZE * board.length}px`,\n          width: `${CELL_SIZE * board.length}px`,\n          height: `${CELL_SIZE * board.length}px`,\n          margin: 0,\n          padding: 0\n        }}\n        ref={chessBoardRef}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\"\n          }}\n        >\n          <RenderChessBoard\n            board={board}\n            chessBoardRef={chessBoardRef}\n            userPieceColor={\"white\"}\n            movePiece={(i: number, j: number) => {\n              return;\n            }}\n            testBoard={true}\n          />\n        </div>\n        <div\n          style={{\n            padding: \"0.5rem 0\",\n            display: \"flex\",\n            justifyContent: \"space-evenly\"\n          }}\n        >\n          <Button variant=\"contained\" disabled={!analyzing}>\n            <KeyboardArrowLeftIcon />\n          </Button>\n\n          <Button variant=\"contained\">Analyze</Button>\n\n          <Button variant=\"contained\" onClick={playMove} disabled={!analyzing}>\n            <KeyboardArrowRightIcon />\n          </Button>\n        </div>\n      </div>\n\n      <div\n        className={classes.messagesContainer}\n        style={{ height: `${CELL_SIZE * board.length}px`, width: \"100%\" }}\n      >\n        <List\n          style={{\n            height: `${CELL_SIZE * board.length}px`,\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflow: \"auto\"\n          }}\n        >\n          <div style={{ height: \"90%\" }}>\n            {allGamesList.map((game, index) => (\n              <ListItem\n                key={game.game_id}\n                onClick={() => {\n                  analyzeGame(game.game_id);\n                }}\n                className={\n                  game.game_id === analyzingGameId\n                    ? listStyles.listItemClicked\n                    : listStyles.listItem\n                }\n              >\n                <h5 style={{ width: \"10%\" }}>{index + 1}</h5>\n                <span style={{ width: \"60%\" }}>\n                  {game.player1} vs {game.player2}\n                </span>\n                <span style={{ width: \"30%\" }}>{\"  \" + game.date.split(\"T\")[0]}</span>\n              </ListItem>\n            ))}\n          </div>\n\n          <ListItem style={{ height: \"10%\" }}>\n            <Button variant=\"contained\" onClick={getAllChessGames}>\n              Get All Games\n            </Button>\n          </ListItem>\n        </List>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoardTest;\n","export enum ActionNames {\n  USER_LOGIN = \"USER_LOGIN\",\n  USER_REGISTER = \"USER_REGISTER\",\n  USER_LOGOUT = \"USER_LOGOUT\",\n  UPDATE_USER_SOCKET_DETAILS = \"UPDATE_USER_SOCKET_DETAILS\",\n  UPDATE_USER_PROFILE_PICTURE = \"UPDATE_USER_PROFILE_PICTURE\",\n  SET_SOCKET = \"SET_SOCKET\"\n}\n","import React from \"react\";\nimport CheckersPiece from \"../../classes/checkers/CheckersPiece\";\nimport { CheckersBoardType, CheckersPieceColor } from \"../../types/checkersTypes\";\nimport Cell from \"../allGames/Cell\";\n\ninterface RenderChessBoardProps {\n  board: CheckersBoardType;\n  checkersBoardRef: React.MutableRefObject<HTMLDivElement | null>;\n  userPieceColor: CheckersPieceColor;\n  testBoard: boolean;\n  movePiece: (row: number, col: number) => void;\n}\n\nconst RenderCheckersBoard: React.FC<RenderChessBoardProps> = ({\n  board,\n  checkersBoardRef,\n  userPieceColor,\n  testBoard,\n  movePiece\n}) => {\n  return (\n    <>\n      {board.map((row, ri) => (\n        <div style={{ margin: 0, padding: 0, display: \"flex\" }} key={`row${ri}`}>\n          {row.map((_col, ci) => {\n            let color = (ri + ci) % 2 === 0 ? \"#222f3e\" : \"#e74c3c\";\n\n            let image = \"\";\n            let piece = board[ri][ci];\n            let blueDot = false;\n\n            if (piece instanceof CheckersPiece) {\n              if (piece.color === \"white\") {\n                if (piece.isKing) image = \"images/checkers/WhiteKing.png\";\n                else image = \"images/checkers/WhitePiece.png\";\n              } else {\n                if (piece.isKing) image = \"images/checkers/RedKing.png\";\n                else image = \"images/checkers/RedPiece.png\";\n              }\n            } else if (piece === \"dot\") {\n              blueDot = true;\n            }\n\n            return (\n              <Cell\n                game=\"checkers\"\n                blueDot={blueDot}\n                row={ri}\n                col={ci}\n                color={color}\n                key={`row${ri}-col${ci}`}\n                image={image}\n                showMoves={movePiece}\n                boardRef={checkersBoardRef}\n                userCheckersColor={userPieceColor}\n                testBoard={testBoard}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default RenderCheckersBoard;\n","import { getRowCol, getStr } from \"../../helpers/globalHelpers\";\nimport {\n  CheckersBoardType,\n  CheckersMoveType,\n  CheckersPieceColor\n} from \"../../types/checkersTypes\";\nimport { PiecePosition } from \"../../types/chessTypes\";\nimport { ClickedCellsType } from \"../../types/games\";\nimport CheckersPiece from \"./CheckersPiece\";\n\nclass CheckersGame {\n  cellsClicked: ClickedCellsType;\n  numClicks: number;\n  turn: CheckersPieceColor;\n  selected: CheckersPiece | null;\n  redPiecesOnBoard: number;\n  whitePiecesOnBoard: number;\n  gameOver: boolean;\n  winner: CheckersPieceColor | null;\n  gameMoves: string;\n\n  constructor() {\n    this.cellsClicked = { rows: [], cols: [] };\n    this.numClicks = 0;\n    this.turn = \"white\";\n    this.selected = null;\n    this.redPiecesOnBoard = 8;\n    this.whitePiecesOnBoard = 8;\n    this.gameOver = false;\n    this.winner = null;\n    this.gameMoves = \"\";\n  }\n\n  clearDots = (board: CheckersBoardType): void => {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board.length; j++) {\n        if (board[i][j] === \"dot\") board[i][j] = 0;\n      }\n    }\n  };\n\n  showDots = (board: CheckersBoardType, moves: CheckersMoveType): void => {\n    Object.entries(moves).forEach(\n      ([key, actualMove]: [\n        string,\n        \"valid\" | { capturing: { row: number; col: number } }\n      ]) => {\n        // key = row,col\n        const [row, col] = getRowCol(key);\n\n        if (actualMove === \"valid\") {\n          board[row][col] = \"dot\";\n        } else {\n          board[row][col] = \"dot\";\n        }\n      }\n    );\n  };\n\n  showValidMoves = (\n    userColor: CheckersPieceColor,\n    board: CheckersBoardType,\n    row: number,\n    col: number\n  ) => {\n    const cell = board[row][col];\n\n    if (cell instanceof CheckersPiece) {\n      if (cell.color !== userColor) return;\n    }\n\n    this.clearDots(board);\n\n    if (cell instanceof CheckersPiece) {\n      if (cell.color === this.turn) {\n        let piece = cell;\n        let pieceMoves = piece.validMoves(board);\n\n        this.showDots(board, pieceMoves);\n\n        // piece.isClicked = true;\n      }\n    }\n\n    let tempCellsClicked = this.select(board, row, col);\n\n    return tempCellsClicked;\n  };\n\n  select = (board: CheckersBoardType, row: number, col: number) => {\n    // console.log(\"select called\");\n    const cell = board[row][col];\n\n    if (this.numClicks === 0) {\n      if (!(cell instanceof CheckersPiece)) return;\n      if (cell.color !== this.turn) return;\n\n      this.cellsClicked.rows.push(row);\n      this.cellsClicked.cols.push(col);\n      this.numClicks++;\n      return this.cellsClicked;\n    } else if (this.numClicks === 1) {\n      // a piece has already been clicked\n\n      if (cell instanceof CheckersPiece) {\n        // if player clicked on another piece of his color, do not changeTurn\n        if (cell.color === this.turn) {\n          this.cellsClicked.rows[0] = row;\n          this.cellsClicked.cols[0] = col;\n          return this.cellsClicked;\n        }\n      }\n\n      let str = getStr(row, col);\n      let piece = board[this.cellsClicked.rows[0]][\n        this.cellsClicked.cols[0]\n      ] as CheckersPiece;\n      const validPieceMoves = piece.validMoves(board);\n\n      if (!(str in validPieceMoves)) {\n        return;\n      }\n\n      // update this.cellsClicked for socket connection\n      this.cellsClicked.rows.push(row);\n      this.cellsClicked.cols.push(col);\n\n      let tempCellsClicked = this.movePiece(board, this.cellsClicked, validPieceMoves);\n\n      return tempCellsClicked;\n    }\n  };\n\n  generateGameMove = (\n    clickedCells: ClickedCellsType,\n    capturingMove: { wasCapturingMove: boolean; capturedPiecePos: PiecePosition }\n  ) => {\n    let move = \"\";\n\n    const {\n      rows: [ri, rf],\n      cols: [ci, cf]\n    } = clickedCells;\n    const [cpr, cpc] = capturingMove.capturedPiecePos;\n\n    if (!capturingMove.wasCapturingMove) {\n      move += `${getStr(ri, rf)};${getStr(ci, cf)}:`;\n    } else {\n      // move += `${getStr(ri, rf)};${getStr(cpr, cpc)};${getStr(ci, cf)}:`;\n      move += `${getStr(ri, rf)};${getStr(ci, cf)}:`;\n    }\n\n    this.gameMoves += move;\n  };\n\n  getMoves = () => {\n    return this.gameMoves;\n  };\n\n  movePiece = (\n    board: CheckersBoardType,\n    clickedCells: ClickedCellsType,\n    validPieceMoves?: CheckersMoveType\n  ) => {\n    // clicked cells is basically this.cellsClicked, but we take it as a\n    // parameter so that we can also use it for sockets\n\n    let { rows, cols } = clickedCells;\n\n    const [rowi, rowf] = rows;\n    const [coli, colf] = cols;\n\n    // can be absolutely sure that rows and cols in clickedCells always contain a checker's piece\n    const piece = board[rowi][coli] as CheckersPiece;\n\n    if (!validPieceMoves) {\n      validPieceMoves = piece.validMoves(board);\n    }\n\n    const actualMove = validPieceMoves[getStr(rowf, colf)];\n\n    let wasCapturingMove = false;\n    let capturedPiecePos: PiecePosition = [-1, -1];\n\n    if (actualMove === \"valid\") {\n      // not a capturing move\n      piece.setRowCol(rowf, colf);\n\n      // clicked cell is a valid move\n      board[rowi][coli] = 0;\n      board[rowf][colf] = piece;\n    } else {\n      wasCapturingMove = true;\n\n      // if it is a capturing move then the info about the piece captured\n      // is stored in the second position of the array\n      const { row, col } = actualMove.capturing;\n\n      let capturedPiece = board[row][col] as CheckersPiece;\n      piece.setRowCol(rowf, colf);\n\n      if (capturedPiece.isKing) {\n        piece.makeKing();\n      }\n\n      if (capturedPiece.color === \"white\") {\n        this.whitePiecesOnBoard--;\n      } else if (capturedPiece.color === \"red\") {\n        this.redPiecesOnBoard--;\n      }\n\n      // clicked cell is a valid move\n      board[rowi][coli] = 0;\n      board[row][col] = 0; // remove the captured piece\n      board[rowf][colf] = piece;\n\n      capturedPiecePos = [row, col];\n    }\n\n    let tcc = this.cellsClicked;\n\n    this.generateGameMove(tcc, { wasCapturingMove, capturedPiecePos });\n\n    this.clearDots(board);\n    this.changeTurn();\n\n    return tcc;\n  };\n\n  colorHasMovesLeft = (board: CheckersBoardType, color: CheckersPieceColor) => {\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board.length; col++) {\n        const cell = board[row][col];\n\n        if (cell instanceof CheckersPiece && cell.color === color) {\n          const moves = cell.validMoves(board);\n          if (Object.keys(moves).length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  redWins = () => {\n    this.gameOver = true;\n    this.winner = \"red\";\n    return this.gameOver;\n  };\n\n  whiteWins = () => {\n    this.gameOver = true;\n    this.winner = \"white\";\n    return this.gameOver;\n  };\n\n  isGameOver = (board: CheckersBoardType) => {\n    if (this.turn === \"red\") {\n      if (this.redPiecesOnBoard === 0) {\n        return this.whiteWins();\n      }\n    } else {\n      if (this.whitePiecesOnBoard === 0) {\n        return this.redWins();\n      }\n    }\n\n    if (!this.colorHasMovesLeft(board, \"red\")) {\n      return this.whiteWins();\n    }\n\n    if (!this.colorHasMovesLeft(board, \"white\")) {\n      return this.redWins();\n    }\n\n    return false;\n  };\n\n  changeTurn = () => {\n    this.cellsClicked = { rows: [], cols: [] };\n    this.numClicks = 0;\n\n    this.turn = this.turn === \"white\" ? \"red\" : \"white\";\n  };\n}\n\nexport default CheckersGame;\n","import CheckersPiece from \"../classes/checkers/CheckersPiece\";\nimport { CheckersBoardType } from \"../types/checkersTypes\";\n\nexport const getNewCheckersBoard = (): CheckersBoardType => {\n  const tempBoard = new Array(8).fill(0).map(e => new Array(8).fill(0));\n\n  for (let row = 0; row < tempBoard.length; row++) {\n    for (let col = 0; col < tempBoard.length; col++) {\n      if (row < 2) {\n        if (row === 0 && col % 2 === 0) {\n          tempBoard[row][col] = new CheckersPiece(\"white\", [row, col]);\n        } else if (row === 1 && col % 2 !== 0) {\n          tempBoard[row][col] = new CheckersPiece(\"white\", [row, col]);\n        }\n      }\n\n      if (row > 5) {\n        if (row === 6 && col % 2 === 0) {\n          tempBoard[row][col] = new CheckersPiece(\"red\", [row, col]);\n        } else if (row === 7 && col % 2 !== 0) {\n          tempBoard[row][col] = new CheckersPiece(\"red\", [row, col]);\n        }\n      }\n    }\n  }\n\n  return tempBoard;\n};\n","import axios from \"axios\";\n\nconst baseURL =\n  process.env.NODE_ENV === \"development\"\n    ? process.env.REACT_APP_DEV_BACKEND_URL\n    : process.env.REACT_APP_PROD_BACKEND_URL;\n\nexport const axiosInstance = axios.create({\n  baseURL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport { RootState } from \"../store/reducers/combinedReducers\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// react stuff\nimport React, { useState, useEffect, useRef } from \"react\";\n\n// components\nimport GameOverComponent from \"../allGames/GameOverComponent\";\nimport RenderCheckersBoard from \"./RenderCheckersBoard\";\n\n// checkers\nimport CheckersGame from \"../../classes/checkers/CheckersGame\";\n\n// types\nimport { CheckersBoardType, CheckersPieceColor } from \"../../types/checkersTypes\";\nimport { RouteProps } from \"../../types/routeProps\";\nimport { getNewCheckersBoard } from \"../../helpers/checkersBoard\";\nimport { axiosInstance } from \"../../config/axiosConfig\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { getCheckersMovesFromString } from \"../../helpers/globalHelpers\";\nimport { Button } from \"@material-ui/core\";\n\nlet game = new CheckersGame();\n\ninterface CheckersBoardProps extends RouteProps {}\n\ninterface GameOverState {\n  gameOver: boolean;\n  winnerName: string;\n  winnerColor: CheckersPieceColor;\n}\n\nconst CheckersPlayBoard: React.FC<CheckersBoardProps> = () => {\n  const { user } = useTypedSelector(state => state);\n\n  const [board, setBoard] = useState<CheckersBoardType>(() => getNewCheckersBoard());\n\n  const [gameOver, setGameOver] = useState<GameOverState>({\n    gameOver: false,\n    winnerName: \"\",\n    winnerColor: \"\" as CheckersPieceColor\n  });\n\n  let [userPieceColor, setUserPieceColor] = useState<CheckersPieceColor>(\"white\");\n\n  const checkersBoardRef = useRef<HTMLDivElement | null>(null);\n\n  const showMoves = (row: number, col: number) => {\n    if (!gameOver.gameOver) {\n      let tempBoard = board.map(b => b);\n      let cellsClicked = game.showValidMoves(userPieceColor, tempBoard, row, col);\n      setBoard(tempBoard);\n\n      if (cellsClicked?.cols.length === 2) {\n        setUserPieceColor(c => (c === \"white\" ? \"red\" : \"white\"));\n      }\n\n      let isGameOver = game.isGameOver(board);\n\n      if (isGameOver) {\n        const winnerName = game.winner === userPieceColor ? user.username : \"player2Name\";\n\n        let newGameOverObject = {\n          gameOver: true,\n          winnerColor: game.winner as CheckersPieceColor,\n          winnerName\n        };\n\n        setGameOver(newGameOverObject);\n      }\n    }\n  };\n\n  return (\n    <div style={{ marginLeft: \"4rem\", display: \"flex\" }}>\n      <div id=\"checkersBoard\" style={{ position: \"relative\" }}>\n        {gameOver.gameOver && (\n          <GameOverComponent\n            winnerColor={gameOver.winnerColor}\n            winnerName={gameOver.winnerName}\n          />\n        )}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: userPieceColor === \"white\" ? \"column\" : \"column\"\n          }}\n          ref={checkersBoardRef}\n        >\n          <RenderCheckersBoard\n            board={board}\n            checkersBoardRef={checkersBoardRef}\n            userPieceColor={userPieceColor}\n            testBoard={true}\n            movePiece={showMoves}\n          />\n        </div>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const data = JSON.stringify({\n              player1: user.username,\n              player2: \"Johan\",\n              moves: game.getMoves()\n            });\n\n            console.log(data);\n\n            axiosInstance\n              .post(\"/games/checkers/savegame\", data)\n              .then(resp => console.log(resp.data));\n          }}\n        >\n          Analyze\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckersPlayBoard;\n","import { CheckersBoardType } from \"../../types/checkersTypes\";\nimport { ClickedCellsType } from \"../../types/games\";\nimport CheckersGame from \"./CheckersGame\";\n\nclass CheckersAnalysis extends CheckersGame {\n  movesList: ClickedCellsType[];\n  currentMove: number;\n\n  constructor(moveList: ClickedCellsType[]) {\n    super();\n    this.movesList = moveList;\n    this.currentMove = 0;\n  }\n\n  playNextMove = (board: CheckersBoardType) => {\n    if (this.currentMove >= this.movesList.length) return;\n\n    const moveToPlay = this.movesList[this.currentMove];\n\n    this.movePiece(board, moveToPlay);\n\n    this.currentMove++;\n  };\n}\n\nexport default CheckersAnalysis;\n","import { makeStyles } from \"@material-ui/core\";\nimport React from \"react\";\n\nexport const wrapperDivStyles: React.CSSProperties = {\n  width: \"95%\",\n  minHeight: \"92vh\",\n  display: \"flex\",\n  justifyContent: \"space-evenly\",\n  alignItems: \"center\",\n  flexWrap: \"wrap\"\n};\n\nexport const boardStyles: React.CSSProperties = {\n  width: \"65%\",\n  display: \"flex\",\n  justifyContent: \"center\"\n};\n\nexport const chatStyles: React.CSSProperties = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  height: \"100%\"\n};\n\nexport const roomIdInputStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiInputBase-root.MuiFilledInput-root.MuiInputBase-fullWidth\": {\n      backgroundColor: \"rgba(0, 0, 0, 0.5)\"\n    },\n\n    \"& label.MuiInputLabel-formControl\": {\n      top: 5,\n      left: 15\n    }\n  }\n}));\n\nexport const chatBoxStyles = makeStyles(theme => ({\n  root: {\n    height: \"475px\",\n    marginTop: \"1rem\"\n  },\n  messagesContainer: {\n    height: \"90%\",\n    maxHeight: \"90%\",\n    backgroundColor: \"#222f3e\",\n    overflow: \"auto\"\n  },\n  inputContainer: {\n    \"& .MuiFilledInput-underline:after\": {\n      borderBottomColor: \"white\"\n    },\n    \"& .MuiFilledInput-root \": {\n      borderTop: \"2px solid white\",\n      backgroundColor: \"#222f3e\",\n      color: \"white\"\n    },\n    \"& .MuiInputBase-root.MuiFilledInput-root.MuiInputBase-formControl\": {\n      borderRadius: 0\n    }\n  }\n}));\n","import { useState, useEffect } from \"react\";\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState([window.innerWidth, window.innerHeight]);\n\n  const resetWindowSize = (e: UIEvent) => {\n    e.preventDefault();\n    setSize([window.innerWidth, window.innerHeight]);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", resetWindowSize);\n    return () => {\n      window.removeEventListener(\"resize\", resetWindowSize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import { getStr } from \"../../helpers/globalHelpers\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  ChessPieceName,\n  GenericKingParametersType,\n  KingParametersType,\n  PiecePosition,\n  ProtectingChessMove,\n  ValidChessMove\n} from \"../../types/chessTypes\";\n\nclass ChessPiece {\n  color: ChessPieceColor;\n  row: number;\n  col: number;\n  moves: ValidChessMove;\n  protectingMoves: ProtectingChessMove;\n  isBeingAttacked: boolean;\n  isClicked: boolean;\n  pieceName: ChessPieceName;\n  image: string;\n  isKing: boolean;\n\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    this.color = color;\n    this.row = row;\n    this.col = col;\n    this.moves = {};\n    this.protectingMoves = {};\n    this.isBeingAttacked = false;\n    this.isClicked = false;\n    this.pieceName = \"pawn\";\n    this.image = \"\";\n    this.isKing = false;\n    this.setRowCol(row, col);\n  }\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) =>\n    ({} as ValidChessMove);\n\n  getCellsBetweenPieces = (kingPos: PiecePosition) => ({});\n\n  checkIfKingInCheck = (kingParameters: KingParametersType) => {\n    let { whiteKingInCheck, blackKingInCheck } = kingParameters;\n\n    if (this.color === \"white\" && whiteKingInCheck) {\n      let { whiteKingPos, pieceCheckingWhiteKing } = kingParameters;\n      this.moves = this.handleKingInCheck({\n        kingPos: whiteKingPos,\n        pieceCheckingKing: pieceCheckingWhiteKing\n      });\n    }\n\n    if (this.color === \"black\" && blackKingInCheck) {\n      let { blackKingPos, pieceCheckingBlackKing } = kingParameters;\n      this.moves = this.handleKingInCheck({\n        kingPos: blackKingPos,\n        pieceCheckingKing: pieceCheckingBlackKing\n      });\n    }\n  };\n\n  handleKingInCheck = (kingParameters: GenericKingParametersType) => {\n    // the king of the same color is in check\n    let { kingPos, pieceCheckingKing } = kingParameters;\n    let newValidMoves: ValidChessMove = {};\n\n    // handle king is being checked by every piece except the king\n    if (\n      pieceCheckingKing &&\n      (pieceCheckingKing.pieceName === \"knight\" || pieceCheckingKing.pieceName === \"pawn\")\n    ) {\n      // only way to escape a Knight's or a Pawn's check is to either move the king,\n      // or to capture the Knight or Pawn\n      if (!(getStr(pieceCheckingKing.row, pieceCheckingKing.col) in this.moves)) {\n        return {};\n      } else {\n        let move = getStr(pieceCheckingKing.row, pieceCheckingKing.col);\n        newValidMoves[move] = \"capturing\";\n        return newValidMoves;\n      }\n    }\n\n    if (pieceCheckingKing) {\n      // get the cells between the king and the piece checking the king\n      // this way we can check if a move exists that blocks the check\n      const cellsBetweenPieces = pieceCheckingKing.getCellsBetweenPieces(kingPos);\n\n      if (this.pieceName === \"king\") {\n        // console.log(\"inside if \");\n        // if it is the king then it has to move\n        console.log(\"king moves = \", this.moves);\n        Object.keys(this.moves).forEach(key => {\n          if (!(key in cellsBetweenPieces)) {\n            // if the move is not a check blocking move\n            // as the king cannot move to a square that's under attack\n            newValidMoves[key] = \"valid\";\n          }\n\n          // can only capture with the king if the piece being captured is not\n          // being protected by one of it's own pieces\n          if (\n            key ===\n            getStr(\n              (pieceCheckingKing as ChessPiece).row,\n              (pieceCheckingKing as ChessPiece).col\n            )\n          ) {\n            newValidMoves[key] = \"capturing\";\n          }\n        });\n      } else {\n        // if it's not the king then it can block the check\n        //console.log(\"inside else\");\n        Object.keys(this.moves).forEach(key => {\n          if (key in cellsBetweenPieces) {\n            // try to implement piece being pinned here\n\n            newValidMoves[key] = \"valid\";\n          }\n          if (\n            key ===\n            getStr(\n              (pieceCheckingKing as ChessPiece).row,\n              (pieceCheckingKing as ChessPiece).col\n            )\n          ) {\n            newValidMoves[key] = \"capturing\";\n          }\n        });\n      }\n    }\n\n    return newValidMoves;\n  };\n\n  handlePiecePinnedByRook = (\n    kingParameters: KingParametersType,\n    board: ChessBoardType\n  ) => {\n    let newValidMoves: ValidChessMove = {};\n\n    let { blackKingPos, whiteKingPos } = kingParameters;\n\n    let kingPos: [number, number];\n    const oppColor = this.color === \"white\" ? \"black\" : \"white\";\n\n    if (this.color === \"black\") {\n      kingPos = blackKingPos;\n    } else {\n      kingPos = whiteKingPos;\n    }\n\n    if (this.row !== kingPos[0] || this.col !== kingPos[1]) return;\n    else if (this.row === kingPos[0]) {\n      // piece and king are on the same row\n      let colAdder = 0,\n        isPinned = false;\n\n      // if king is to the left, check the right and vice versa\n      if (kingPos[1] < this.col) colAdder = 1;\n      else if (kingPos[1] > this.col) colAdder = -1;\n\n      // iterate through the row to find if piece is pinned\n      let column = this.col + colAdder;\n      while (column > -1 && column < 8) {\n        let piece = board[this.row][column];\n\n        if (\n          piece instanceof ChessPiece &&\n          (piece.pieceName === \"rook\" || piece.pieceName === \"queen\")\n        ) {\n          if (piece.color === oppColor) {\n            isPinned = true;\n          }\n        }\n\n        column += colAdder;\n      }\n\n      if (isPinned) {\n        Object.keys(this.moves).forEach(move => {\n          // only add the move the new moves if the move is on the\n          // same row\n          if (Number(move.split(\",\")[0]) === this.row) {\n            newValidMoves[move] = this.moves[move];\n          }\n        });\n        this.moves = newValidMoves;\n      }\n    } else if (this.col === kingPos[1]) {\n      // piece and king are on the same col\n      let rowAdder = 0,\n        isPinned = false;\n\n      // if king is to the left, check the right and vice versa\n      if (kingPos[0] < this.row) rowAdder = 1;\n      else if (kingPos[0] > this.row) rowAdder = -1;\n\n      // iterate through the row to find if piece is pinned\n      let row = this.row + rowAdder;\n      while (row > -1 && row < 8) {\n        let piece = board[row][this.col];\n\n        if (\n          piece instanceof ChessPiece &&\n          (piece.pieceName === \"rook\" || piece.pieceName === \"queen\")\n        ) {\n          if (piece.color === oppColor) {\n            isPinned = true;\n          }\n        }\n\n        row += rowAdder;\n      }\n\n      if (isPinned) {\n        Object.keys(this.moves).forEach(move => {\n          // only add the move the new moves if the move is on the\n          // same column\n          if (Number(move.split(\",\")[1]) === this.col) {\n            newValidMoves[move] = this.moves[move];\n          }\n        });\n\n        this.moves = newValidMoves;\n      }\n    }\n  };\n\n  handlePiecePinnedByBishop = (\n    kingParameters: KingParametersType,\n    board: ChessBoardType\n  ) => {\n    let newValidMoves: ValidChessMove = {};\n\n    let { blackKingPos, whiteKingPos } = kingParameters;\n\n    let kingPos;\n    const oppColor = this.color === \"white\" ? \"black\" : \"white\";\n\n    if (this.color === \"black\") {\n      kingPos = blackKingPos;\n    } else {\n      kingPos = whiteKingPos;\n    }\n\n    // check if piece and king are on the same diagonal\n    if (Math.abs(this.row - kingPos[0]) !== Math.abs(this.col - kingPos[1])) return;\n\n    let rowAdder = 0,\n      colAdder = 0;\n    let [kingRow, kingCol] = kingPos;\n\n    // upper left king, go lower right\n    if (kingRow < this.row && kingCol < this.col) {\n      rowAdder = 1;\n      colAdder = 1;\n    } else if (kingRow < this.row && kingCol > this.col) {\n      // upper right king, go lower left\n      rowAdder = 1;\n      colAdder = -1;\n    } else if (kingRow > this.row && kingCol < this.col) {\n      // lower left king, go upper right\n      rowAdder = -1;\n      colAdder = 1;\n    } else if (kingRow > this.row && kingCol > this.col) {\n      // lower right king, go upper left\n      rowAdder = -1;\n      colAdder = -1;\n    }\n\n    let row = this.row + rowAdder;\n    let col = this.col + colAdder;\n    let isPinned = false;\n    let pinningPiece: ChessPiece | null = null;\n\n    while (row > -1 && row < 8 && col > -1 && col < 8) {\n      let piece = board[row][col];\n      if (piece instanceof ChessPiece && piece.color === oppColor) {\n        if (piece.pieceName === \"bishop\" || piece.pieceName === \"queen\") {\n          isPinned = true;\n          pinningPiece = piece;\n        }\n      }\n\n      row += rowAdder;\n      col += colAdder;\n    }\n\n    if (isPinned && pinningPiece) {\n      // only moves allowed is on the same diagonal that the piece and\n      // king are on\n\n      const cellsBetweenKingAndPinningPiece = pinningPiece.getCellsBetweenPieces(kingPos);\n\n      Object.keys(this.moves).forEach(move => {\n        if (move in cellsBetweenKingAndPinningPiece) {\n          // on the same diagonal as the king, but\n          // not necessarily on the same diagonal as the king\n          // and the piece\n\n          newValidMoves[move] = this.moves[move];\n        }\n\n        if (\n          move ===\n          getStr((pinningPiece as ChessPiece).row, (pinningPiece as ChessPiece).col)\n        ) {\n          newValidMoves[move] = this.moves[move];\n        }\n      });\n\n      this.moves = newValidMoves;\n    }\n  };\n\n  setRowCol = (row: number, col: number) => {\n    this.row = row;\n    this.col = col;\n  };\n\n  resetMoves = () => {\n    this.moves = {};\n    this.protectingMoves = {};\n  };\n}\n\nexport default ChessPiece;\n","import {\n  ChessBoardType,\n  ChessPieceColor,\n  KingParametersType,\n  PotentialCapturingMove\n} from \"../../types/chessTypes\";\nimport ChessPiece from \"./ChessPiece\";\n\nimport { getStr } from \"../../helpers/globalHelpers\";\n\nclass Pawn extends ChessPiece {\n  hasMoved: boolean;\n  potentialCapturingMoves: PotentialCapturingMove;\n\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    super(color, row, col);\n    this.hasMoved = false;\n    this.pieceName = \"pawn\";\n    this.image = `images/chess/${this.color}Pawn.png`;\n\n    this.potentialCapturingMoves = {};\n    this.setHasMoved();\n  }\n\n  setHasMoved = () => {\n    if (this.color === \"black\" && this.row !== 1) {\n      this.hasMoved = true;\n    }\n\n    if (this.color === \"white\" && this.row !== 6) {\n      this.hasMoved = true;\n    }\n  };\n\n  validMoves = (\n    board: ChessBoardType,\n    kingParameters: KingParametersType,\n    initialCall = false\n  ) => {\n    // console.log(kingParameters);\n\n    this.resetMoves();\n\n    const adder = this.color === \"black\" ? 1 : -1;\n\n    if (!this.hasMoved && board[this.row + adder][this.col] === 0) {\n      if (board[this.row + adder * 2][this.col] === 0) {\n        this.moves[getStr(this.row + adder * 2, this.col)] = \"valid\";\n      }\n    }\n\n    if (this.row + adder >= 0 && this.row + adder < 8) {\n      if (board[this.row + adder][this.col] === 0) {\n        this.moves[getStr(this.row + adder, this.col)] = \"valid\";\n      }\n\n      // capturing moves\n      if (this.col + 1 < 8) {\n        const potentialCapture = board[this.row + adder][this.col + 1];\n        if (potentialCapture instanceof ChessPiece) {\n          if (potentialCapture.color !== this.color) {\n            this.moves[getStr(this.row + adder, this.col + 1)] = \"capturing\";\n          } else {\n            this.protectingMoves[getStr(this.row + adder, this.col + 1)] = \"protecting\";\n          }\n        } else if (potentialCapture === 0) {\n          this.potentialCapturingMoves[getStr(this.row + adder, this.col + 1)] =\n            \"potentialCapture\";\n        }\n      }\n      if (this.col - 1 >= 0) {\n        const potentialCapture = board[this.row + adder][this.col - 1];\n\n        if (potentialCapture instanceof ChessPiece) {\n          if (potentialCapture.color !== this.color) {\n            this.moves[getStr(this.row + adder, this.col - 1)] = \"capturing\";\n          } else {\n            this.protectingMoves[getStr(this.row + adder, this.col - 1)] = \"protecting\";\n          }\n        } else if (potentialCapture === 0) {\n          this.potentialCapturingMoves[getStr(this.row + adder, this.col - 1)] =\n            \"potentialCapture\";\n        }\n      }\n    }\n\n    this.checkIfKingInCheck(kingParameters);\n    this.handlePiecePinnedByRook(kingParameters, board);\n    this.handlePiecePinnedByBishop(kingParameters, board);\n\n    return this.moves;\n  };\n\n  setRowCol = (row: number, col: number) => {\n    this.row = row;\n    this.col = col;\n    this.hasMoved = true;\n  };\n\n  display() {\n    return this.color[0].toUpperCase() + \"P\";\n  }\n}\n\nexport default Pawn;\n","import { getStr } from \"../../helpers/globalHelpers\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  KingParametersType,\n  PiecePosition,\n  ValidChessMove\n} from \"../../types/chessTypes\";\nimport ChessPiece from \"./ChessPiece\";\n\nclass Rook extends ChessPiece {\n  hasMoved: boolean;\n\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    super(color, row, col);\n    this.pieceName = \"rook\";\n    this.hasMoved = false;\n    this.image = `images/chess/${this.color}Rook.png`;\n  }\n\n  getCellsBetweenPieces = (kingPos: PiecePosition) => {\n    let rowAdder = 0,\n      colAdder = 0;\n\n    let kingRow = kingPos[0],\n      kingCol = kingPos[1];\n\n    let cellsBetweenPieces: ValidChessMove = {};\n\n    // up\n    if (kingRow < this.row && kingCol === this.col) {\n      rowAdder = -1;\n      colAdder = 0;\n    } else if (kingRow > this.row && kingCol === this.col) {\n      //down\n      rowAdder = 1;\n      colAdder = 0;\n    } else if (kingRow === this.row && kingCol < this.col) {\n      // left\n      rowAdder = 0;\n      colAdder = -1;\n    } else if (kingRow === this.row && kingCol > this.col) {\n      // right\n      rowAdder = 0;\n      colAdder = 1;\n    }\n\n    if (rowAdder !== 0) {\n      for (let row = this.row + rowAdder; row !== kingRow; row += rowAdder) {\n        cellsBetweenPieces[getStr(row, this.col)] = \"valid\";\n      }\n    }\n\n    if (colAdder !== 0) {\n      for (let col = this.col + colAdder; col !== kingCol; col += colAdder) {\n        cellsBetweenPieces[getStr(this.row, col)] = \"valid\";\n      }\n    }\n\n    return cellsBetweenPieces;\n  };\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    this.resetMoves();\n\n    // go outwards from the current row, i.e iterate through columns\n    for (let c = this.col - 1; c >= 0; c--) {\n      const piece = board[this.row][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(this.row, c)] = \"protecting\";\n          break;\n        } else {\n          this.moves[getStr(this.row, c)] = \"capturing\";\n          break;\n        }\n      }\n\n      this.moves[getStr(this.row, c)] = \"valid\";\n    }\n\n    for (let c = this.col + 1; c < 8; c++) {\n      const piece = board[this.row][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(this.row, c)] = \"protecting\";\n          break;\n        } else {\n          this.moves[getStr(this.row, c)] = \"capturing\";\n          break;\n        }\n      }\n\n      this.moves[getStr(this.row, c)] = \"valid\";\n    }\n\n    // go outwards from the current column, i.e iterate through rows\n    for (let r = this.row - 1; r >= 0; r--) {\n      const piece = board[r][this.col];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, this.col)] = \"protecting\";\n          break;\n        } else {\n          this.moves[getStr(r, this.col)] = \"capturing\";\n          break;\n        }\n      }\n\n      this.moves[getStr(r, this.col)] = \"valid\";\n    }\n\n    for (let r = this.row + 1; r < 8; r++) {\n      const piece = board[r][this.col];\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, this.col)] = \"protecting\";\n          break;\n        } else if (piece.color !== this.color) {\n          this.moves[getStr(r, this.col)] = \"capturing\";\n          break;\n        }\n      }\n\n      this.moves[getStr(r, this.col)] = \"valid\";\n    }\n\n    this.checkIfKingInCheck(kingParameters);\n    this.handlePiecePinnedByRook(kingParameters, board);\n    this.handlePiecePinnedByBishop(kingParameters, board);\n\n    return this.moves;\n  };\n\n  setRowCol = (row: number, col: number) => {\n    this.row = row;\n    this.col = col;\n    this.hasMoved = true;\n  };\n}\n\nexport default Rook;\n","import { getStr } from \"../../helpers/globalHelpers\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  KingParametersType\n} from \"../../types/chessTypes\";\nimport ChessPiece from \"./ChessPiece\";\nimport Piece from \"./ChessPiece\";\n\nclass Knight extends Piece {\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    super(color, row, col);\n    this.pieceName = \"knight\";\n    this.image = `images/chess/${this.color}Knight.png`;\n  }\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    this.resetMoves();\n\n    let arrC = [-2, -1, 1, 2];\n    let arrR = [1, 2, 2, 1];\n    // -2 and 2 at -1 and 1\n    // -1 and 1 at -2 and 2\n\n    for (let i = 0; i < 4; i++) {\n      if (this.col + arrC[i] >= 0 && this.col + arrC[i] < 8) {\n        // ---\n\n        if (this.row - arrR[i] >= 0) {\n          const cell = board[this.row - arrR[i]][this.col + arrC[i]];\n\n          if (cell === 0) {\n            this.moves[getStr(this.row - arrR[i], this.col + arrC[i])] = \"valid\";\n          } else if (cell instanceof ChessPiece && cell.color !== this.color) {\n            this.moves[getStr(this.row - arrR[i], this.col + arrC[i])] = \"capturing\";\n          } else if (cell instanceof ChessPiece && cell.color === this.color) {\n            this.protectingMoves[getStr(this.row - arrR[i], this.col + arrC[i])] =\n              \"protecting\";\n          }\n        }\n\n        if (this.row + arrR[i] < 8) {\n          const cell = board[this.row + arrR[i]][this.col + arrC[i]];\n\n          if (cell === 0) {\n            this.moves[getStr(this.row + arrR[i], this.col + arrC[i])] = \"valid\";\n          } else if (cell instanceof ChessPiece && cell.color !== this.color) {\n            this.moves[getStr(this.row + arrR[i], this.col + arrC[i])] = \"capturing\";\n          } else if (cell instanceof ChessPiece && cell.color === this.color) {\n            this.protectingMoves[getStr(this.row + arrR[i], this.col + arrC[i])] =\n              \"protecting\";\n          }\n        }\n      }\n    }\n\n    this.checkIfKingInCheck(kingParameters);\n    this.handlePiecePinnedByRook(kingParameters, board);\n    this.handlePiecePinnedByBishop(kingParameters, board);\n\n    return this.moves;\n  };\n\n  display() {\n    return this.color[0].toUpperCase() + \"Kn\";\n  }\n}\n\nexport default Knight;\n","import {\n  ChessBoardType,\n  ChessPieceColor,\n  KingParametersType,\n  PiecePosition,\n  ValidChessMove\n} from \"../../types/chessTypes\";\nimport ChessPiece from \"./ChessPiece\";\n\nimport { getStr } from \"../../helpers/globalHelpers\";\n\nclass Bishop extends ChessPiece {\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    super(color, row, col);\n    this.pieceName = \"bishop\";\n    this.image = `images/chess/${this.color}Bishop.png`;\n  }\n\n  upperRight = (board: ChessBoardType) => {\n    let c = this.col;\n    for (let r = this.row - 1; r >= 0; r--) {\n      if (c === 7) break;\n      else c++;\n\n      const piece = board[r][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, c)] = \"protecting\";\n          return;\n        } else {\n          this.moves[getStr(r, c)] = \"capturing\";\n          return;\n        }\n      }\n\n      this.moves[getStr(r, c)] = \"valid\";\n    }\n  };\n\n  lowerRight = (board: ChessBoardType) => {\n    let c = this.col;\n    for (let r = this.row + 1; r < 8; r++) {\n      if (c === 7) break;\n      else c++;\n\n      const piece = board[r][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, c)] = \"protecting\";\n          return;\n        } else {\n          this.moves[getStr(r, c)] = \"capturing\";\n          return;\n        }\n      }\n\n      this.moves[getStr(r, c)] = \"valid\";\n    }\n  };\n\n  upperLeft = (board: ChessBoardType) => {\n    let c = this.col;\n    for (let r = this.row - 1; r >= 0; r--) {\n      if (c === 0) break;\n      else c--;\n      const piece = board[r][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, c)] = \"protecting\";\n          return;\n        } else {\n          this.moves[getStr(r, c)] = \"capturing\";\n          return;\n        }\n      }\n\n      this.moves[getStr(r, c)] = \"valid\";\n    }\n  };\n\n  lowerLeft = (board: ChessBoardType) => {\n    let c = this.col;\n    for (let r = this.row + 1; r < 8; r++) {\n      if (c === 0) break;\n      else c--;\n      const piece = board[r][c];\n\n      if (piece instanceof ChessPiece) {\n        if (piece.color === this.color) {\n          this.protectingMoves[getStr(r, c)] = \"protecting\";\n\n          return;\n        } else {\n          this.moves[getStr(r, c)] = \"capturing\";\n          return;\n        }\n      }\n\n      this.moves[getStr(r, c)] = \"valid\";\n    }\n  };\n\n  getCellsBetweenPieces = (kingPos: PiecePosition) => {\n    let rowAdder = 0,\n      colAdder = 0;\n    let kingRow = kingPos[0],\n      kingCol = kingPos[1];\n\n    let cellsBetweenPieces: ValidChessMove = {};\n\n    // upper left\n    if (kingRow < this.row && kingCol < this.col) {\n      rowAdder = -1;\n      colAdder = -1;\n    } else if (kingRow < this.row && kingCol > this.col) {\n      // upper right\n      rowAdder = -1;\n      colAdder = 1;\n    } else if (kingRow > this.row && kingCol < this.col) {\n      // lower left\n      rowAdder = 1;\n      colAdder = -1;\n    } else if (kingRow > this.row && kingCol > this.col) {\n      // lower right\n      rowAdder = 1;\n      colAdder = 1;\n    }\n\n    let row = this.row + rowAdder,\n      col = this.col + colAdder;\n\n    while (row !== kingRow && col !== kingCol) {\n      cellsBetweenPieces[getStr(row, col)] = \"valid\";\n      row += rowAdder;\n      col += colAdder;\n    }\n\n    return cellsBetweenPieces;\n  };\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    this.resetMoves();\n\n    this.upperRight(board);\n    this.lowerRight(board);\n    this.upperLeft(board);\n    this.lowerLeft(board);\n\n    this.checkIfKingInCheck(kingParameters);\n    this.handlePiecePinnedByRook(kingParameters, board);\n    this.handlePiecePinnedByBishop(kingParameters, board);\n\n    return this.moves;\n  };\n\n  display() {\n    return this.color[0].toUpperCase() + \"B\";\n  }\n}\n\nexport default Bishop;\n","import ChessPiece from \"./ChessPiece\";\nimport Rook from \"./Rook\";\n\nimport { getStr } from \"../../helpers/globalHelpers\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  GenericKingParametersType,\n  InvalidChessMove,\n  KingParametersType,\n  ValidChessMove\n} from \"../../types/chessTypes\";\n\nclass King extends ChessPiece {\n  hasMoved: boolean;\n  invalidMoves: InvalidChessMove;\n  canCastleLeft: boolean | null;\n  canCastleRight: boolean | null;\n\n  constructor(\n    color: ChessPieceColor,\n    row: number,\n    col: number,\n    canCastleLeft = null,\n    canCastleRight = null\n  ) {\n    super(color, row, col);\n    this.pieceName = \"king\";\n    this.image = `images/chess/${this.color}King.png`;\n    this.isKing = true;\n    this.hasMoved = false;\n    this.invalidMoves = {};\n\n    // for puzzles\n    this.canCastleLeft = canCastleLeft;\n    this.canCastleRight = canCastleRight;\n  }\n\n  notAllowKingToMoveToAttackedCell = (kingParameters: KingParametersType) => {\n    let newValidMoves: ValidChessMove = {},\n      newInvalidMoves: InvalidChessMove = {};\n\n    const { cellsUnderAttackByWhite, cellsUnderAttackByBlack } = kingParameters;\n\n    const cellsUnderAttack =\n      this.color === \"white\" ? cellsUnderAttackByBlack : cellsUnderAttackByWhite;\n\n    const moveKeys = Object.keys(this.moves);\n    const otherKeys = Object.keys(cellsUnderAttack);\n\n    for (let i = 0; i < moveKeys.length; i++) {\n      let moveAllowed = true;\n      for (let j = 0; j < otherKeys.length; j++) {\n        if (moveKeys[i] in cellsUnderAttack[otherKeys[j]]) {\n          moveAllowed = false;\n          break;\n        }\n      }\n      if (moveAllowed) {\n        newValidMoves[moveKeys[i]] = this.moves[moveKeys[i]];\n      } else {\n        newInvalidMoves[moveKeys[i]] = \"invalid\";\n      }\n    }\n\n    this.invalidMoves = newInvalidMoves;\n\n    return newValidMoves;\n  };\n\n  isPathBetweenRookAndKingBlocked = (\n    board: ChessBoardType,\n    rookColor: ChessPieceColor\n  ) => {\n    const row = rookColor === \"white\" ? 7 : 0;\n    const blockedPath = { leftBlocked: false, rightBlocked: false };\n\n    const leftCols = [1, 2, 3];\n    const rightCols = [5, 6];\n\n    leftCols.forEach(col => {\n      if (board[row][col] instanceof ChessPiece) blockedPath.leftBlocked = true;\n    });\n\n    rightCols.forEach(col => {\n      if (board[row][col] instanceof ChessPiece) blockedPath.rightBlocked = true;\n    });\n\n    return blockedPath;\n  };\n\n  isRookPresent = (board: ChessBoardType, rookColor: ChessPieceColor) => {\n    const row = rookColor === \"white\" ? 7 : 0;\n\n    const leftRook = board[row][0];\n    const rightRook = board[row][7];\n\n    if (!(leftRook instanceof Rook) && !(rightRook instanceof Rook)) return false;\n    else if (leftRook instanceof Rook && leftRook.hasMoved) return false;\n    else if (rightRook instanceof Rook && rightRook.hasMoved) return false;\n\n    return true;\n  };\n\n  addCastlingMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    if (this.canCastleLeft !== null || this.canCastleRight !== null) {\n      // this is for puzzles\n\n      if (this.canCastleLeft === true) {\n        this.moves[getStr(this.row, this.col - 2)] = \"castling\";\n      }\n\n      if (this.canCastleRight === true) {\n        this.moves[getStr(this.row, this.col + 2)] = \"castling\";\n      }\n\n      return;\n    }\n\n    const { whiteKingInCheck, blackKingInCheck } = kingParameters;\n\n    if (this.hasMoved) return;\n\n    if (this.color === \"white\") {\n      // if there's an unmoved Rook\n      if (whiteKingInCheck) return;\n      if (this.row !== 7) return;\n\n      // if there's no rook then return\n      if (!this.isRookPresent(board, this.color)) return;\n\n      // if any piece is blocking the path between both rooks and king, return\n      const { leftBlocked, rightBlocked } = this.isPathBetweenRookAndKingBlocked(\n        board,\n        this.color\n      );\n\n      if (leftBlocked && rightBlocked) return; // both paths are blocked\n\n      if (!leftBlocked) {\n        this.moves[getStr(this.row, this.col - 2)] = \"castling\";\n      }\n\n      if (!rightBlocked) {\n        this.moves[getStr(this.row, this.col + 2)] = \"castling\";\n      }\n    } else {\n      if (blackKingInCheck) return;\n      if (this.row !== 0) return;\n      if (!this.isRookPresent(board, this.color)) return;\n\n      const { leftBlocked, rightBlocked } = this.isPathBetweenRookAndKingBlocked(\n        board,\n        this.color\n      );\n\n      if (leftBlocked && rightBlocked) return;\n\n      if (!leftBlocked) {\n        this.moves[getStr(this.row, this.col - 2)] = \"castling\";\n      }\n\n      if (!rightBlocked) {\n        this.moves[getStr(this.row, this.col + 2)] = \"castling\";\n      }\n    }\n  };\n\n  handleKingInCheckByRook = ({ pieceCheckingKing }: GenericKingParametersType) => {\n    if (!pieceCheckingKing) return;\n\n    let newValidMoves: ValidChessMove = {};\n    let rookSquares = {} as { [key: string]: boolean };\n\n    let row = pieceCheckingKing.row + 1,\n      col = pieceCheckingKing.col;\n    // up (row--)\n    while (row > -1) {\n      rookSquares[getStr(row, col)] = true;\n      row--;\n    }\n\n    // down (row++)\n    row = pieceCheckingKing.row - 1;\n    while (row < 8) {\n      rookSquares[getStr(row, col)] = true;\n      row++;\n    }\n\n    // left (col--)\n    row = pieceCheckingKing.row;\n    col = pieceCheckingKing.col - 1;\n    while (col > -1) {\n      rookSquares[getStr(row, col)] = true;\n      col--;\n    }\n\n    // right (col++)\n    col = pieceCheckingKing.col + 1;\n    while (col < 8) {\n      rookSquares[getStr(row, col)] = true;\n      col++;\n    }\n\n    Object.keys(this.moves).forEach(move => {\n      if (!(move in rookSquares)) {\n        newValidMoves[move] = this.moves[move];\n      }\n    });\n\n    // capturing move\n    let cm = getStr(pieceCheckingKing.row, pieceCheckingKing.col);\n\n    if (cm in this.moves) {\n      newValidMoves[cm] = this.moves[cm];\n    }\n\n    this.moves = newValidMoves;\n  };\n\n  handleKingInCheckByBishop = ({ pieceCheckingKing }: GenericKingParametersType) => {\n    if (!pieceCheckingKing) return;\n\n    // go upper left (row--, col--)\n    let bishopSquares = {} as { [key: string]: boolean };\n\n    let row = pieceCheckingKing.row - 1,\n      col = pieceCheckingKing.col - 1;\n\n    while (row > -1 && col > -1) {\n      bishopSquares[getStr(row, col)] = true;\n      row--;\n      col--;\n    }\n\n    // upper right (row--, col++)\n    row = pieceCheckingKing.row - 1;\n    col = pieceCheckingKing.col + 1;\n    while (row > -1 && col < 8) {\n      bishopSquares[getStr(row, col)] = true;\n      row--;\n      col++;\n    }\n\n    // lower left (row++, col--)\n    row = pieceCheckingKing.row + 1;\n    col = pieceCheckingKing.col - 1;\n    while (row < 8 && col > -1) {\n      bishopSquares[getStr(row, col)] = true;\n      row++;\n      col--;\n    }\n\n    // lower right (row++, col++)\n    row = pieceCheckingKing.row + 1;\n    col = pieceCheckingKing.col + 1;\n    while (row < 8 && col < 8) {\n      bishopSquares[getStr(row, col)] = true;\n      row++;\n      col++;\n    }\n\n    let newValidMoves: ValidChessMove = {};\n\n    Object.keys(this.moves).forEach(move => {\n      if (!(move in bishopSquares)) {\n        newValidMoves[move] = this.moves[move];\n      }\n    });\n\n    let cm = getStr(pieceCheckingKing.row, pieceCheckingKing.col);\n\n    // console.log(\"king in check by bishop, this.moves = \", this.moves);\n\n    if (cm in this.moves) {\n      newValidMoves[cm] = this.moves[cm];\n    }\n\n    // console.log(\"right after, newValidMoves = \", newValidMoves);\n\n    this.moves = newValidMoves;\n  };\n\n  handleKingInCheckByQueen = (genericKingParams: GenericKingParametersType) => {\n    this.handleKingInCheckByRook(genericKingParams);\n    this.handleKingInCheckByBishop(genericKingParams);\n  };\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    this.resetMoves();\n\n    const rowsArray = [\n      [-1, 0, 1],\n      [-1, 1],\n      [-1, 0, 1]\n    ];\n    const colsArray = [this.col - 1, this.col, this.col + 1];\n\n    colsArray.forEach((column, i) => {\n      if (column > -1 && column < 8) {\n        rowsArray[i].forEach(rowAdder => {\n          if (this.row + rowAdder > -1 && this.row + rowAdder < 8) {\n            let piece = board[this.row + rowAdder][column];\n\n            if (piece === 0) {\n              this.moves[getStr(this.row + rowAdder, column)] = \"valid\";\n            } else if (piece instanceof ChessPiece && piece.color !== this.color) {\n              this.moves[getStr(this.row + rowAdder, column)] = \"capturing\";\n            } else if (piece instanceof ChessPiece && piece.color === this.color) {\n              this.protectingMoves[getStr(this.row + rowAdder, column)] = \"protecting\";\n            }\n          }\n        });\n      }\n    });\n\n    // castling\n    this.addCastlingMoves(board, kingParameters);\n\n    const { pieceCheckingWhiteKing, pieceCheckingBlackKing, blackKingPos, whiteKingPos } =\n      kingParameters;\n\n    if (this.color === \"white\" && pieceCheckingWhiteKing) {\n      let obj: GenericKingParametersType = {\n        pieceCheckingKing: pieceCheckingWhiteKing,\n        kingPos: whiteKingPos\n      };\n\n      if (pieceCheckingWhiteKing.pieceName === \"rook\") {\n        this.handleKingInCheckByRook(obj);\n      } else if (pieceCheckingWhiteKing.pieceName === \"bishop\") {\n        this.handleKingInCheckByBishop(obj);\n      } else if (pieceCheckingWhiteKing.pieceName === \"queen\") {\n        this.handleKingInCheckByQueen(obj);\n      }\n    } else if (this.color === \"black\" && pieceCheckingBlackKing) {\n      let obj: GenericKingParametersType = {\n        pieceCheckingKing: pieceCheckingBlackKing,\n        kingPos: blackKingPos\n      };\n\n      if (pieceCheckingBlackKing.pieceName === \"rook\") {\n        this.handleKingInCheckByRook(obj);\n      } else if (pieceCheckingBlackKing.pieceName === \"bishop\") {\n        this.handleKingInCheckByBishop(obj);\n      } else if (pieceCheckingBlackKing.pieceName === \"queen\") {\n        this.handleKingInCheckByQueen(obj);\n      }\n    }\n\n    this.moves = this.notAllowKingToMoveToAttackedCell(kingParameters);\n\n    // console.log(\"king moves final = \", this.moves);\n\n    return this.moves;\n  };\n\n  setRowCol = (row: number, col: number) => {\n    this.row = row;\n    this.col = col;\n    this.hasMoved = true;\n  };\n\n  display() {\n    return this.color[0].toUpperCase() + \"K\";\n  }\n}\n\nexport default King;\n","import Bishop from \"./Bishop\";\nimport Rook from \"./Rook\";\nimport Piece from \"./ChessPiece\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  KingParametersType,\n  PiecePosition\n} from \"../../types/chessTypes\";\n\nclass Queen extends Piece {\n  rook: Rook;\n  bishop: Bishop;\n\n  constructor(color: ChessPieceColor, row: number, col: number) {\n    super(color, row, col);\n    this.pieceName = \"queen\";\n    this.rook = new Rook(this.color, this.row, this.col);\n    this.bishop = new Bishop(this.color, this.row, this.col);\n    this.image = `images/chess/${this.color}Queen.png`;\n  }\n\n  getCellsBetweenPieces = (kingPos: PiecePosition) => {\n    const rooks = this.rook.getCellsBetweenPieces(kingPos);\n    const bishops = this.bishop.getCellsBetweenPieces(kingPos);\n\n    return { ...rooks, ...bishops };\n  };\n\n  validMoves = (board: ChessBoardType, kingParameters: KingParametersType) => {\n    this.resetMoves();\n\n    const rm = this.rook.validMoves(board, kingParameters);\n    const bm = this.bishop.validMoves(board, kingParameters);\n\n    this.moves = { ...rm, ...bm };\n\n    this.protectingMoves = {\n      ...this.rook.protectingMoves,\n      ...this.bishop.protectingMoves\n    };\n\n    // don't have to do this.checkIfKingInCheck as rook and bishop take care of that\n    return this.moves;\n  };\n\n  setRowCol = (row: number, col: number) => {\n    this.row = row;\n    this.rook.row = row;\n    this.bishop.row = row;\n\n    this.col = col;\n    this.rook.col = col;\n    this.bishop.col = col;\n  };\n\n  display() {\n    return this.color[0].toUpperCase() + \"Q\";\n  }\n}\n\nexport default Queen;\n","import Bishop from \"../classes/chess/Bishop\";\nimport King from \"../classes/chess/King\";\nimport Knight from \"../classes/chess/Knight\";\nimport Pawn from \"../classes/chess/Pawn\";\nimport Queen from \"../classes/chess/Queen\";\nimport Rook from \"../classes/chess/Rook\";\nimport { ChessBoardType, ChessPieceName } from \"../types/chessTypes\";\n\nexport const getNewChessBoard = (): ChessBoardType => [\n  [\n    new Rook(\"black\", 0, 0),\n    new Knight(\"black\", 0, 1),\n    new Bishop(\"black\", 0, 2),\n    new Queen(\"black\", 0, 3),\n    new King(\"black\", 0, 4),\n    new Bishop(\"black\", 0, 5),\n    new Knight(\"black\", 0, 6),\n    new Rook(\"black\", 0, 7)\n  ],\n  [\n    new Pawn(\"black\", 1, 0),\n    new Pawn(\"black\", 1, 1),\n    new Pawn(\"black\", 1, 2),\n    new Pawn(\"black\", 1, 3),\n    new Pawn(\"black\", 1, 4),\n    new Pawn(\"black\", 1, 5),\n    new Pawn(\"black\", 1, 6),\n    new Pawn(\"black\", 1, 7)\n  ],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [\n    new Pawn(\"white\", 6, 0),\n    new Pawn(\"white\", 6, 1),\n    new Pawn(\"white\", 6, 2),\n    new Pawn(\"white\", 6, 3),\n    new Pawn(\"white\", 6, 4),\n    new Pawn(\"white\", 6, 5),\n    new Pawn(\"white\", 6, 6),\n    new Pawn(\"white\", 6, 7)\n  ],\n  [\n    new Rook(\"white\", 7, 0),\n    new Knight(\"white\", 7, 1),\n    new Bishop(\"white\", 7, 2),\n    new Queen(\"white\", 7, 3),\n    new King(\"white\", 7, 4),\n    new Bishop(\"white\", 7, 5),\n    new Knight(\"white\", 7, 6),\n    new Rook(\"white\", 7, 7)\n  ]\n];\n\nexport const pieceNamesToLetter: { [k in ChessPieceName]: string } = {\n  pawn: \"\",\n  knight: \"N\",\n  bishop: \"B\",\n  rook: \"R\",\n  queen: \"Q\",\n  king: \"K\"\n};\n","import ChessPiece from \"../classes/chess/ChessPiece\";\nimport { ClickedCellsType } from \"./games\";\n\nexport type ChessDrawType = \"Stalemate\" | \"Insufficient Pieces\";\n\nexport const waysToDraw: { [key: string]: ChessDrawType } = Object.freeze({\n  STALEMATE: \"Stalemate\",\n  INSUFFICIENT_PIECES: \"Insufficient Pieces\"\n});\n\nexport type ChessPieceColor = \"white\" | \"black\";\nexport type ChessPieceName = \"pawn\" | \"knight\" | \"bishop\" | \"rook\" | \"queen\" | \"king\";\n\nexport type ChessWinner =\n  | ChessPieceColor\n  | \"Draw by Stalemate\"\n  | \"Draw by Insufficient Pieces\"\n  | \"\";\n\nexport type ValidMoveType = \"valid\";\nexport type CapturingMoveType = \"capturing\";\nexport type ProtectingMoveType = \"protecting\";\nexport type CastlingMoveType = \"castling\";\nexport type InvalidMoveType = \"invalid\";\n\nexport type PotentialCapturingMove = { [k: string]: \"potentialCapture\" };\n\nexport type ValidChessMove = {\n  [key: string]: ValidMoveType | CapturingMoveType | CastlingMoveType;\n};\n\nexport type InvalidChessMove = {\n  [key: string]: InvalidMoveType;\n};\n\nexport type ProtectingChessMove = {\n  [key: string]: ProtectingMoveType;\n};\n\nexport type ChessBoardType = (ChessPiece | number | \"dot\")[][];\n\nexport type PiecePosition = [number, number];\n\n// export type CellsUnderAttack = {\n//   [key: string]:\n//     | ValidMoveType\n//     | CapturingMoveType\n//     | ProtectingMoveType\n//     | CastlingMoveType\n//     | InvalidMoveType;\n// };\n\nexport type CellsUnderAttack = {\n  [key: string]:\n    | ValidChessMove\n    | InvalidChessMove\n    | ProtectingChessMove\n    | PotentialCapturingMove;\n};\n\nexport type KingParametersType = {\n  blackKingInCheck: boolean;\n  whiteKingInCheck: boolean;\n  pieceCheckingWhiteKing: ChessPiece | null;\n  pieceCheckingBlackKing: ChessPiece | null;\n  whiteKingPos: PiecePosition;\n  blackKingPos: PiecePosition;\n  cellsUnderAttackByWhite: CellsUnderAttack;\n  cellsUnderAttackByBlack: CellsUnderAttack;\n};\n\nexport type GenericKingParametersType = {\n  pieceCheckingKing: ChessPiece | null;\n  kingPos: PiecePosition;\n};\n\nexport type MovePieceReturnType = {\n  cellsClicked: ClickedCellsType;\n  castlingDone: boolean;\n  pawnPromoted: boolean;\n};\n\nexport type ShowValidMovesReturnType = undefined | ClickedCellsType | MovePieceReturnType;\n\nexport type FenChars =\n  | \"r\"\n  | \"R\"\n  | \"k\"\n  | \"K\"\n  | \"n\"\n  | \"N\"\n  | \"q\"\n  | \"Q\"\n  | \"b\"\n  | \"B\"\n  | \"p\"\n  | \"P\";\n","import { pieceNamesToLetter } from \"../../helpers/chessHelpers\";\nimport { getStr } from \"../../helpers/globalHelpers\";\nimport {\n  CellsUnderAttack,\n  ChessBoardType,\n  ChessDrawType,\n  ChessPieceColor,\n  ChessPieceName,\n  ChessWinner,\n  InvalidChessMove,\n  KingParametersType,\n  MovePieceReturnType,\n  PiecePosition,\n  PotentialCapturingMove,\n  ProtectingChessMove,\n  ShowValidMovesReturnType,\n  ValidChessMove,\n  waysToDraw\n} from \"../../types/chessTypes\";\nimport { ClickedCellsType } from \"../../types/games\";\nimport Bishop from \"./Bishop\";\nimport ChessPiece from \"./ChessPiece\";\nimport King from \"./King\";\nimport Knight from \"./Knight\";\nimport Pawn from \"./Pawn\";\nimport Queen from \"./Queen\";\nimport Rook from \"./Rook\";\n\nclass ChessGame {\n  turn: ChessPieceColor;\n  cellsClicked: ClickedCellsType;\n  numClicks: number;\n  selected: ChessPiece | null;\n\n  blackKingInCheck: boolean;\n  whiteKingInCheck: boolean;\n  pieceCheckingWhiteKing: ChessPiece | null;\n  pieceCheckingBlackKing: ChessPiece | null;\n  whiteKingPos: PiecePosition;\n  blackKingPos: PiecePosition;\n  cellsUnderAttackByWhite: CellsUnderAttack;\n  cellsUnderAttackByBlack: CellsUnderAttack;\n\n  kingParams: KingParametersType;\n\n  gameOver: boolean;\n  winner: ChessWinner;\n\n  piecePoints: { [key in ChessPieceName]: number };\n\n  whitePiecesValue: number;\n  blackPiecesValue: number;\n\n  whitePiecesOnBoard: { [key in ChessPieceName]: number };\n  blackPiecesOnBoard: { [key in ChessPieceName]: number };\n\n  allGameMoves: ClickedCellsType[];\n  pgn: { [k: number]: string };\n  movesString: string;\n\n  constructor(\n    turn: ChessPieceColor = \"white\",\n    whiteKingPos: PiecePosition = [7, 4],\n    blackKingPos: PiecePosition = [0, 4]\n  ) {\n    this.turn = turn;\n\n    this.cellsClicked = { rows: [], cols: [] };\n    this.numClicks = 0;\n    this.selected = null;\n\n    this.whiteKingPos = whiteKingPos;\n    this.blackKingPos = blackKingPos;\n    this.whiteKingInCheck = false;\n    this.blackKingInCheck = false;\n    this.pieceCheckingWhiteKing = null;\n    this.pieceCheckingBlackKing = null;\n\n    this.kingParams = {} as KingParametersType;\n\n    this.gameOver = false;\n    this.winner = \"\";\n    this.whitePiecesOnBoard = this.initialPieces();\n    this.blackPiecesOnBoard = this.initialPieces();\n    this.piecePoints = {\n      king: 0,\n      queen: 9,\n      knight: 3,\n      bishop: 3,\n      rook: 5,\n      pawn: 1\n    };\n    this.whitePiecesValue = 0;\n    this.blackPiecesValue = 0;\n\n    // key = row,col of the piece\n    // value = piece.validMoves()\n    this.cellsUnderAttackByWhite = {};\n    this.cellsUnderAttackByBlack = {};\n\n    this.allGameMoves = [];\n    this.pgn = {};\n    this.movesString = \"\";\n\n    this.setKingParams();\n  }\n\n  initialPieces = () => {\n    return {\n      king: 1,\n      queen: 1,\n      knight: 2,\n      bishop: 2,\n      rook: 2,\n      pawn: 8\n    };\n  };\n\n  /*\n    parameters to pass to validmoves function\n    0. Board\n    1. need to pass if kings are in check.\n    2. position of the kings.\n    3. piece that is chekcing the king.\n    */\n\n  setKingParams = () => {\n    this.kingParams = {\n      whiteKingInCheck: this.whiteKingInCheck,\n      blackKingInCheck: this.blackKingInCheck,\n      whiteKingPos: this.whiteKingPos,\n      blackKingPos: this.blackKingPos,\n      pieceCheckingWhiteKing: this.pieceCheckingWhiteKing,\n      pieceCheckingBlackKing: this.pieceCheckingBlackKing,\n      cellsUnderAttackByWhite: this.cellsUnderAttackByWhite,\n      cellsUnderAttackByBlack: this.cellsUnderAttackByBlack\n    };\n  };\n\n  clearDots = (board: ChessBoardType) => {\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board.length; col++) {\n        const piece = board[row][col];\n\n        if (piece === \"dot\") {\n          board[row][col] = 0;\n        }\n\n        if (piece instanceof ChessPiece) {\n          if (piece.isBeingAttacked) {\n            piece.isBeingAttacked = false;\n          }\n\n          if (piece.isClicked) {\n            piece.isClicked = false;\n          }\n        }\n      }\n    }\n  };\n\n  showDots = (board: ChessBoardType, moves: ValidChessMove) => {\n    //\tconsole.log(moves);\n    Object.keys(moves).forEach(key => {\n      // key = row,col\n      const [row, col] = key.split(\",\").map(k => Number(k));\n\n      if (moves[key] === \"valid\") {\n        board[row][col] = \"dot\";\n      } else if (moves[key] === \"capturing\") {\n        (board[row][col] as ChessPiece).isBeingAttacked = true;\n      } else if (moves[key] === \"castling\") {\n        board[row][col] = \"dot\";\n      }\n    });\n  };\n\n  showValidMoves = (\n    userColor: ChessPieceColor,\n    board: ChessBoardType,\n    row: number,\n    col: number\n  ): ShowValidMovesReturnType => {\n    if (\n      board[row][col] instanceof ChessPiece &&\n      (board[row][col] as ChessPiece).color !== userColor &&\n      this.numClicks === 0\n    )\n      return;\n\n    this.clearDots(board);\n\n    let piece = board[row][col];\n\n    if (piece instanceof ChessPiece) {\n      if (piece.color === this.turn) {\n        // console.log(\"calculating piece moves\");\n\n        this.showDots(board, piece.validMoves(board, this.kingParams));\n\n        piece.isClicked = true;\n      }\n    }\n\n    let tempCellsClicked = this.select(board, row, col);\n\n    return tempCellsClicked;\n  };\n\n  handlePawnPromotion = (pawn: Pawn) => {\n    // use DOM Manupulation to show the component to choose\n    // the piece to promote the pawn to\n    if (pawn.row === 0 || pawn.row === 7) return true;\n\n    return false;\n  };\n\n  changePawnToPiece = (\n    board: ChessBoardType,\n    promoteTo: ChessPieceName,\n    color: ChessPieceColor,\n    rowf: number,\n    colf: number\n  ) => {\n    switch (promoteTo) {\n      case \"queen\":\n        board[rowf][colf] = new Queen(color, rowf, colf);\n        break;\n\n      case \"rook\":\n        board[rowf][colf] = new Rook(color, rowf, colf);\n        break;\n\n      case \"bishop\":\n        board[rowf][colf] = new Bishop(color, rowf, colf);\n        break;\n\n      case \"knight\":\n        board[rowf][colf] = new Knight(color, rowf, colf);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  promotePawn = (\n    board: ChessBoardType,\n    promoteTo: ChessPieceName,\n    cellsClicked: ClickedCellsType\n  ) => {\n    // pawn has already been moved but the opponent hasn't seen it\n\n    this.generateMoveString(cellsClicked, { promoted: true, promotedTo: promoteTo });\n\n    const { rows, cols } = cellsClicked;\n    const [rowi, rowf] = rows;\n    const [coli, colf] = cols;\n\n    let pawn = board[rowf][colf];\n\n    if (pawn instanceof Pawn) {\n      board[rowf][colf] = 0;\n      this.changePawnToPiece(board, promoteTo, pawn.color, rowf, colf);\n    } else {\n      // move the pawn for the opponent to see\n      let pawn = board[rowi][coli] as ChessPiece;\n      board[rowi][coli] = 0;\n      this.changePawnToPiece(board, promoteTo, pawn.color, rowf, colf);\n    }\n\n    // if the king was already in check, then set it to false as the current\n    // move must've blocked the check\n    if (this.whiteKingInCheck) {\n      this.whiteKingInCheck = false;\n      this.pieceCheckingWhiteKing = null;\n    }\n\n    if (this.blackKingInCheck) {\n      this.blackKingInCheck = false;\n      this.pieceCheckingBlackKing = null;\n    }\n\n    this.setKingParams();\n\n    // get moves and protecting moves of the piece after it has moved\n    // in order to set the 'attacked' squares\n    this.setInitiallyAttackedCells(board);\n\n    this.clearDots(board);\n    this.changeTurn();\n\n    this.setKingInCheck(board, this.turn, board[rowf][colf] as ChessPiece);\n  };\n\n  setKingInCheck = (\n    board: ChessBoardType,\n    kingColor: ChessPieceColor,\n    lastMovedPiece: ChessPiece\n  ) => {\n    if (kingColor === \"white\") {\n      let kingPos = getStr(this.whiteKingPos[0], this.whiteKingPos[1]);\n\n      if (kingPos in lastMovedPiece.validMoves(board, this.kingParams)) {\n        this.whiteKingInCheck = true;\n        this.pieceCheckingWhiteKing = lastMovedPiece;\n      }\n    } else if (kingColor === \"black\") {\n      let kingPos = getStr(this.blackKingPos[0], this.blackKingPos[1]);\n\n      if (kingPos in lastMovedPiece.validMoves(board, this.kingParams)) {\n        // need to set this to false somewhere\n        this.blackKingInCheck = true;\n        this.pieceCheckingBlackKing = lastMovedPiece;\n      }\n    }\n\n    if (this.whiteKingInCheck) {\n      console.log(\"this.whiteKingInCheck\");\n      let [r, c] = this.whiteKingPos;\n      (board[r][c] as King).isBeingAttacked = true;\n    }\n\n    if (this.blackKingInCheck) {\n      console.log(\"this.blackKingInCheck\");\n\n      let [r, c] = this.blackKingPos;\n      (board[r][c] as King).isBeingAttacked = true;\n    }\n\n    this.setKingParams();\n  };\n\n  setInitiallyAttackedCells = (board: ChessBoardType) => {\n    this.cellsUnderAttackByBlack = {};\n    this.cellsUnderAttackByWhite = {};\n\n    this.whitePiecesOnBoard = this.initialPieces();\n    this.blackPiecesOnBoard = this.initialPieces();\n\n    this.whitePiecesValue = 0;\n    this.blackPiecesValue = 0;\n\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board.length; col++) {\n        // console.log(\"setInitiallyAttackedCells\");\n        let piece = board[row][col];\n        if (piece instanceof ChessPiece) {\n          // console.log(\"piece instanceof ChessPiece\");\n          let str = getStr(piece.row, piece.col);\n          let attackedCells:\n            | ValidChessMove\n            | ProtectingChessMove\n            | InvalidChessMove\n            | PotentialCapturingMove = {};\n\n          if (piece.color === \"white\") {\n            if (!(piece.pieceName in this.whitePiecesOnBoard)) {\n              this.whitePiecesOnBoard[piece.pieceName] = 1;\n            } else {\n              this.whitePiecesOnBoard[piece.pieceName] += 1;\n            }\n            this.whitePiecesValue += this.piecePoints[piece.pieceName];\n          } else if (piece.color === \"black\") {\n            if (!(piece.pieceName in this.blackPiecesOnBoard)) {\n              this.blackPiecesOnBoard[piece.pieceName] = 1;\n            } else {\n              this.blackPiecesOnBoard[piece.pieceName] += 1;\n            }\n            this.blackPiecesValue += this.piecePoints[piece.pieceName];\n          }\n\n          // console.log(\"before getting moves\");\n          // this will set piece.moves and piece.protectingMoves\n          if (piece instanceof Pawn) piece.validMoves(board, this.kingParams, true);\n          else piece.validMoves(board, this.kingParams);\n          // console.log(\"after gettingmoves\");\n\n          let totalMoves: ValidChessMove | ProtectingChessMove | PotentialCapturingMove =\n            {};\n\n          if (piece instanceof King) {\n            totalMoves = {\n              ...piece.moves,\n              ...piece.protectingMoves\n              // ...piece.invalidMoves\n            } as ValidChessMove | ProtectingChessMove | PotentialCapturingMove;\n          } else if (piece instanceof Pawn) {\n            totalMoves = {\n              ...piece.moves,\n              ...piece.protectingMoves,\n              ...piece.potentialCapturingMoves\n            } as ValidChessMove | ProtectingChessMove | PotentialCapturingMove;\n          } else {\n            totalMoves = { ...piece.moves, ...piece.protectingMoves } as\n              | ValidChessMove\n              | ProtectingChessMove\n              | PotentialCapturingMove;\n          }\n\n          // console.log(\"totalMoves = \", totalMoves);\n          Object.keys(totalMoves).forEach(key => {\n            // console.log(\"iterating over total moves\");\n\n            const piece = board[row][col];\n\n            if (piece instanceof Pawn) {\n              // as pawn's valid moves aren't its capturing moves\n              if (totalMoves[key] !== \"valid\") {\n                attackedCells[key] = totalMoves[key];\n\n                if (piece.color === \"black\" && getStr(...this.whiteKingPos) === key) {\n                  console.log(\"key = \", key);\n                  console.log(\"getstr(whiteKingPos) = \", getStr(...this.whiteKingPos));\n                  this.whiteKingInCheck = true;\n                  this.pieceCheckingWhiteKing = piece;\n                }\n\n                if (piece.color === \"white\" && getStr(...this.blackKingPos) === key) {\n                  console.log(\"key = \", key);\n                  console.log(\"getstr(blackKingPos) = \", getStr(...this.blackKingPos));\n                  this.blackKingInCheck = true;\n                  this.pieceCheckingBlackKing = piece;\n                }\n              }\n            } else if (piece instanceof ChessPiece) {\n              attackedCells[key] = totalMoves[key];\n\n              if (piece.color === \"black\" && getStr(...this.whiteKingPos) === key) {\n                this.whiteKingInCheck = true;\n                this.pieceCheckingWhiteKing = piece;\n              }\n\n              if (piece.color === \"white\" && getStr(...this.blackKingPos) === key) {\n                this.blackKingInCheck = true;\n                this.pieceCheckingBlackKing = piece;\n              }\n            }\n          });\n\n          if (piece.color === \"white\") {\n            // console.log(\"attackedCells = \", attackedCells);\n            this.cellsUnderAttackByWhite[str] = attackedCells;\n          } else {\n            this.cellsUnderAttackByBlack[str] = attackedCells;\n          }\n        }\n      }\n    }\n\n    this.setKingParams();\n    this.isGameOver(board);\n  };\n\n  select = (\n    board: ChessBoardType,\n    row: number,\n    col: number\n  ): ShowValidMovesReturnType => {\n    if (this.numClicks === 0) {\n      const cell = board[row][col];\n\n      if (!(cell instanceof ChessPiece)) return;\n      else if (cell.color !== this.turn) return;\n      else {\n        this.cellsClicked.rows.push(row);\n        this.cellsClicked.cols.push(col);\n        this.numClicks++;\n        return this.cellsClicked;\n      }\n    } else if (this.numClicks === 1) {\n      // a piece has already been clicked\n      const cell = board[row][col];\n\n      if (cell instanceof ChessPiece) {\n        // if player clicked on another piece of his color, do not changeTurn\n\n        if (cell.color === this.turn) {\n          this.cellsClicked.rows[0] = row;\n          this.cellsClicked.cols[0] = col;\n          return this.cellsClicked;\n        }\n      }\n\n      let str = getStr(row, col);\n      let piece = board[this.cellsClicked.rows[0]][this.cellsClicked.cols[0]];\n\n      if (!(piece instanceof ChessPiece)) return;\n\n      if (!(str in piece.validMoves(board, this.kingParams))) {\n        return;\n      }\n\n      // update this.cellsClicked for socket connection\n      this.cellsClicked.rows.push(row);\n      this.cellsClicked.cols.push(col);\n\n      let tempCellsClicked = this.movePiece(board, this.cellsClicked);\n\n      return tempCellsClicked;\n    }\n  };\n\n  getAllMoves = () => {\n    return this.movesString;\n  };\n\n  generateMoveString = (\n    clickedCells: ClickedCellsType,\n    pawnPromoted?: { promoted: boolean; promotedTo: ChessPieceName }\n  ) => {\n    const {\n      rows: [ri, rf],\n      cols: [ci, cf]\n    } = clickedCells;\n\n    let moveStr = `${getStr(ri, rf)};${getStr(ci, cf)}`;\n\n    if (!pawnPromoted) {\n      this.movesString += `${moveStr}:`;\n    } else {\n      this.movesString += `${moveStr}=${pawnPromoted.promotedTo}:`;\n    }\n  };\n\n  /**\n   * For generating a PGN, two pieces could make the same move, so this function\n   * distinguishes between the pieces and gets the piece that actaully made the move\n   */\n  similarMoveByAnotherPiece = (clickedCells: ClickedCellsType) => {\n    // use cols to indicate the piece\n    // if pieces are on same col, use row\n    // Nbc4 or N4c4\n  };\n\n  generatePgn = (\n    clickedCells: ClickedCellsType,\n    movedPiece: ChessPieceName,\n    moveNumber: number,\n    wasPieceCaptured: boolean,\n    castling: {\n      castled: boolean;\n      side: \"king\" | \"queen\";\n    },\n    promotion?: {\n      promoted: boolean;\n      promotedTo: ChessPieceName;\n    }\n  ) => {\n    let movePgn: string = \"\";\n\n    if (castling.castled) {\n      if (castling.side === \"king\") movePgn = \"O-O\";\n      else movePgn = \"O-O-O\";\n    } else {\n      const {\n        rows: [rowi, rowf],\n        cols: [coli, colf]\n      } = clickedCells;\n\n      // ASCII 'a' = 97\n      const colNamef = String.fromCharCode(colf + 97);\n      const rowNamef = 7 - rowf + 1;\n\n      const colNamei = String.fromCharCode(coli + 97);\n      const rowNamei = 7 - rowi + 1;\n\n      const letter = pieceNamesToLetter[movedPiece];\n\n      let x = \"\";\n\n      if (wasPieceCaptured) {\n        x = \"x\";\n\n        if (letter.length === 0) {\n          // pawn captured something\n          x = `${colNamei}x`;\n        }\n      }\n\n      movePgn = `${letter}${x}${colNamef}${rowNamef}`;\n    }\n\n    if (!(moveNumber in this.pgn)) {\n      this.pgn[moveNumber] = movePgn;\n    } else {\n      this.pgn[moveNumber] += \" \" + movePgn;\n    }\n\n    // console.log(this.pgn);\n  };\n\n  movePiece = (\n    board: ChessBoardType,\n    clickedCells: ClickedCellsType\n  ): MovePieceReturnType => {\n    // clicked cells is basically this.cellsClicked, but we take it as a\n    // parameter so that we can also use it for sockets\n    let castlingDone = false,\n      pawnPromoted = false;\n\n    let castleSide: \"king\" | \"queen\" = \"king\";\n\n    let { rows, cols } = clickedCells;\n\n    const [rowi, rowf] = rows;\n    const [coli, colf] = cols;\n\n    let piece = board[rowi][coli] as ChessPiece;\n\n    const wasPieceCaptured = board[rowf][colf] instanceof ChessPiece;\n\n    if (piece instanceof King && (colf === coli + 2 || colf === coli - 2)) {\n      // castling move played\n      this.castleKing(board, clickedCells);\n      castlingDone = true;\n\n      if (colf === coli + 2) {\n        castleSide = \"king\";\n      } else {\n        castleSide = \"queen\";\n      }\n    } else {\n      // clicked cell is a valid move\n      board[rowi][coli] = 0;\n      board[rowf][colf] = piece;\n    }\n\n    piece.setRowCol(rowf, colf);\n\n    // set the king positions in order to help with checking for 'checks'\n    if (piece instanceof King) {\n      if (piece.color === \"white\") {\n        this.whiteKingPos = [piece.row, piece.col];\n      } else if (piece.color === \"black\") {\n        this.blackKingPos = [piece.row, piece.col];\n      }\n    }\n\n    // if the king was already in check, then set it to false as the current\n    // move must've blocked the check\n    if (this.whiteKingInCheck) {\n      this.whiteKingInCheck = false;\n      this.pieceCheckingWhiteKing = null;\n    }\n\n    if (this.blackKingInCheck) {\n      this.blackKingInCheck = false;\n      this.pieceCheckingBlackKing = null;\n    }\n\n    this.setKingParams();\n\n    if (piece instanceof Pawn) {\n      pawnPromoted = this.handlePawnPromotion(piece);\n\n      if (pawnPromoted) {\n        return { cellsClicked: this.cellsClicked, castlingDone, pawnPromoted };\n      }\n    }\n\n    // get moves and protecting moves of the piece after it has moved\n    // in order to set the 'attacked' squares\n    this.setInitiallyAttackedCells(board);\n\n    let tcc = this.cellsClicked;\n\n    this.clearDots(board);\n    this.changeTurn();\n\n    // check if king is in check\n    // as the previous move might have been by white, and after movePiece()\n    // changes the turn, now it's black's turn and we need to check if\n    // black king is in check\n    // the piece has moved and it's row and columns have been changed so there\n    // is no point in passing the previously calculated moves to this function\n    this.setKingInCheck(board, this.turn, piece);\n\n    // add the move to the list of all moves\n    this.allGameMoves.push(tcc);\n\n    const moveNumber = Math.ceil(this.allGameMoves.length / 2);\n\n    this.generatePgn(tcc, piece.pieceName, moveNumber, wasPieceCaptured, {\n      castled: castlingDone,\n      side: castleSide\n    });\n\n    this.generateMoveString(tcc);\n\n    return { cellsClicked: tcc, castlingDone, pawnPromoted };\n  };\n\n  castleKing = (board: ChessBoardType, clickedCells: ClickedCellsType) => {\n    let { rows, cols } = clickedCells;\n\n    const [rowi, rowf] = rows;\n    const [coli, colf] = cols;\n\n    const king = board[rowi][coli];\n\n    // if colf < coli, then king was moved left\n    // colf > coli = king side castling, i.e castling right\n    // colf < coli = queen side castling, i.e. castling left\n    const rookCol = colf < coli ? 0 : 7;\n    const colAdder = colf < coli ? 1 : -1;\n\n    let rook = board[rowi][rookCol];\n\n    if (rook instanceof Rook) {\n      // move the king\n      board[rowf][colf] = king;\n      board[rowi][coli] = 0;\n\n      // move the rook to the right of the king\n      board[rowf][colf + colAdder] = rook;\n      board[rowi][rookCol] = 0;\n\n      rook.setRowCol(rowf, colf + colAdder);\n    }\n  };\n\n  colorHasMovesLeft = (board: ChessBoardType, color: ChessPieceColor) => {\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board.length; col++) {\n        const piece = board[row][col];\n        if (piece instanceof ChessPiece && piece.color === color) {\n          const validMoves = piece.validMoves(board, this.kingParams);\n          piece.pieceName === \"king\" &&\n            console.log(piece.color + \" \" + piece.pieceName, validMoves);\n          if (Object.keys(validMoves).length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  blackWins = () => {\n    this.gameOver = true;\n    this.winner = \"black\";\n    return this.gameOver;\n  };\n\n  whiteWins = () => {\n    this.gameOver = true;\n    this.winner = \"white\";\n    return this.gameOver;\n  };\n\n  draw = (how: ChessDrawType) => {\n    this.gameOver = true;\n    this.winner = `Draw by ${how}`;\n    return this.gameOver;\n  };\n\n  isGameOver = (board: ChessBoardType) => {\n    if (this.whitePiecesValue === 0 || this.whitePiecesValue === 3) {\n      if (this.blackPiecesValue === 0 || this.blackPiecesValue === 3) {\n        // only two kings are left on board, or a king and bishop/knight left\n        return this.draw(waysToDraw.INSUFFICIENT_PIECES);\n      }\n    }\n\n    if (this.blackPiecesValue === 0 || this.blackPiecesValue === 3) {\n      if (this.whitePiecesValue === 0 || this.whitePiecesValue === 3) {\n        // only two kings are left on board, or a king and bishop/knight left\n        return this.draw(waysToDraw.INSUFFICIENT_PIECES);\n      }\n    }\n\n    if (!this.colorHasMovesLeft(board, \"white\")) {\n      console.log(\"no white moves left\");\n      if (this.whiteKingInCheck) {\n        return this.blackWins();\n      } else {\n        return this.draw(waysToDraw.STALEMATE);\n      }\n    }\n\n    if (!this.colorHasMovesLeft(board, \"black\")) {\n      console.log(\"no black moves left\");\n\n      if (this.blackKingInCheck) {\n        return this.whiteWins();\n      } else {\n        return this.draw(waysToDraw.STALEMATE);\n      }\n    }\n\n    return false;\n  };\n\n  changeTurn = () => {\n    this.cellsClicked = { rows: [], cols: [] };\n    this.numClicks = 0;\n\n    this.turn = this.turn === \"white\" ? \"black\" : \"white\";\n  };\n}\n\nexport default ChessGame;\n","import React, { useState } from \"react\";\n\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { gameOverDiv } from \"../../animations/animations\";\nimport { ChessPieceColor, ChessPieceName } from \"../../types/chessTypes\";\nimport { CELL_SIZE } from \"../../types/games\";\n\ninterface PawnPromotionDialogProps {\n  pawnColor: ChessPieceColor;\n  handlePawnPromotion: (pieceName: ChessPieceName) => void;\n}\n\nconst PawnPromotionDialog: React.FC<PawnPromotionDialogProps> = ({\n  pawnColor,\n  handlePawnPromotion\n}) => {\n  const [hideDiv, setHideDiv] = useState(false);\n\n  const handleClick = (pieceName: ChessPieceName) => {\n    setHideDiv(true);\n    handlePawnPromotion(pieceName);\n  };\n\n  return (\n    <div\n      style={{\n        width: CELL_SIZE * 8 + \"px\",\n        height: CELL_SIZE * 8 + \"px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        zIndex: 99,\n        position: \"absolute\",\n        top: 0,\n        left: 0\n      }}\n    >\n      <AnimatePresence>\n        <motion.div\n          style={{\n            height: \"100px\",\n            width: \"300px\",\n            backgroundColor: \"rgb(255,255,255)\",\n            zIndex: 99,\n            display: hideDiv ? \"none\" : \"flex\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n            boxShadow: \"0 0 20px grey\",\n            borderRadius: \"1rem\",\n            justifySelf: \"center\",\n            alignSelf: \"center\"\n          }}\n          variants={gameOverDiv}\n          initial=\"hidden\"\n          animate=\"show\"\n          exit=\"exit\"\n        >\n          <div onClick={() => handleClick(\"queen\")}>\n            <img src={`images/chess/${pawnColor}Queen.png`} alt={`${pawnColor}queen`} />\n          </div>\n          <div onClick={() => handleClick(\"rook\")}>\n            <img src={`images/chess/${pawnColor}Rook.png`} alt={`${pawnColor}rook`} />\n          </div>\n          <div onClick={() => handleClick(\"bishop\")}>\n            <img src={`images/chess/${pawnColor}Bishop.png`} alt={`${pawnColor}bishop`} />\n          </div>\n          <div onClick={() => handleClick(\"knight\")}>\n            <img src={`images/chess/${pawnColor}Knight.png`} alt={`${pawnColor}knight`} />\n          </div>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default PawnPromotionDialog;\n","import React from \"react\";\n\nimport Cell from \"../allGames/Cell\";\n\nimport { ChessBoardType, ChessPieceColor } from \"../../types/chessTypes\";\nimport ChessPiece from \"../../classes/chess/ChessPiece\";\n\ninterface RenderChessBoardProps {\n  board: ChessBoardType;\n  chessBoardRef: React.MutableRefObject<HTMLDivElement | null>;\n  userPieceColor: ChessPieceColor;\n  testBoard: boolean;\n  movePiece: (row: number, col: number) => void;\n}\n\nconst RenderChessBoard: React.FC<RenderChessBoardProps> = ({\n  board,\n  chessBoardRef,\n  userPieceColor,\n  testBoard,\n  movePiece\n}) => {\n  return (\n    <>\n      {board.map((row, ri) => {\n        return (\n          <div\n            style={{\n              margin: 0,\n              padding: 0,\n              display: \"flex\"\n            }}\n            key={`row${ri}`}\n          >\n            {row.map((col, ci) => {\n              let color =\n                (ri + ci) % 2 !== 0 ? \"rgba(195,105,56,0)\" : \"rgba(239, 206,163,0)\";\n\n              let piece = board[ri][ci];\n              let blueDot = false,\n                redDot,\n                isClicked;\n\n              if (piece === \"dot\") {\n                blueDot = true;\n              }\n\n              if (piece instanceof ChessPiece) {\n                if (piece.isBeingAttacked) {\n                  redDot = true;\n                }\n\n                if (piece.isClicked) {\n                  isClicked = true;\n                }\n              }\n\n              return (\n                <Cell\n                  game=\"chess\"\n                  blueDot={blueDot}\n                  redDot={redDot}\n                  isClicked={isClicked}\n                  row={ri}\n                  col={ci}\n                  color={color}\n                  key={`row${ri}-col${ci}`}\n                  image={piece instanceof ChessPiece ? piece.image : \"\"}\n                  boardRef={chessBoardRef}\n                  showMoves={movePiece}\n                  userChessColor={userPieceColor}\n                  testBoard={testBoard}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default RenderChessBoard;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\nimport Pawn from \"../../classes/chess/Pawn\";\nimport Rook from \"../../classes/chess/Rook\";\nimport Knight from \"../../classes/chess/Knight\";\nimport Bishop from \"../../classes/chess/Bishop\";\nimport King from \"../../classes/chess/King\";\nimport Queen from \"../../classes/chess/Queen\";\nimport ChessGame from \"../../classes/chess/ChessGame\";\n\nimport GameOverComponent from \"../allGames/GameOverComponent\";\nimport PawnPromotionDialog from \"./PawnPromotionDialog\";\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  ChessPieceName,\n  ChessWinner\n} from \"../../types/chessTypes\";\nimport { getNewChessBoard } from \"../../helpers/chessHelpers\";\nimport { generateFenFromBoard } from \"../../helpers/chessParsers\";\nimport { CELL_SIZE, ClickedCellsType } from \"../../types/games\";\nimport { Button } from \"@material-ui/core\";\nimport { getEmptyMatrix } from \"../../helpers/globalHelpers\";\nimport RenderChessBoard from \"./RenderChessBoard\";\nimport { axiosInstance } from \"../../config/axiosConfig\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\n\nlet game: ChessGame = new ChessGame();\n\nconst ChessPlayBoard: React.FC = () => {\n  const { user } = useTypedSelector(state => state);\n\n  const [board, setBoard] = useState<ChessBoardType>(() => getNewChessBoard());\n  const [gameStarted, setGameStarted] = useState(false);\n\n  const [gameOver, setGameOver] = useState<{\n    gameOver: boolean;\n    winnerName: string;\n    winnerColor: ChessWinner;\n  }>({\n    gameOver: false,\n    winnerName: \"\",\n    winnerColor: \"\"\n  });\n\n  const [showPawnPromotionDialog, setShowPawnPromotionDialog] = useState<{\n    show: boolean;\n    cellsClicked: ClickedCellsType;\n    pawnColor: ChessPieceColor | \"\";\n  }>({\n    show: false,\n    cellsClicked: {} as ClickedCellsType,\n    pawnColor: \"\"\n  });\n  const [userPieceColor, setUserPieceColor] = useState<ChessPieceColor>(\"white\");\n\n  const windowSize = useWindowSize();\n\n  const whiteKingPos = useRef<[number, number]>([0, 0]);\n  const blackKingPos = useRef<[number, number]>([0, 0]);\n  const chessBoardRef = useRef<HTMLDivElement>(null);\n\n  const [generatedFen, setGeneratedFen] = useState(\"\");\n\n  const handlePawnPromotion = (pieceName: ChessPieceName) => {\n    let { cellsClicked } = showPawnPromotionDialog;\n    let tempBoard = board.map(row => [...row]);\n\n    // the pawn has been moved at this point\n    game?.promotePawn(tempBoard, pieceName, cellsClicked);\n\n    setBoard(tempBoard);\n\n    setShowPawnPromotionDialog({\n      show: false,\n      cellsClicked: {} as ClickedCellsType,\n      pawnColor: \"\"\n    });\n  };\n\n  const putPieceOnBoard = (\n    pieceName: ChessPieceName,\n    pieceColor: ChessPieceColor,\n    row: number,\n    col: number\n  ) => {\n    let tempBoard = board.map(row => row);\n\n    switch (pieceName) {\n      case \"queen\":\n        tempBoard[row][col] = new Queen(pieceColor, row, col);\n        break;\n\n      case \"rook\":\n        tempBoard[row][col] = new Rook(pieceColor, row, col);\n        break;\n\n      case \"bishop\":\n        tempBoard[row][col] = new Bishop(pieceColor, row, col);\n        break;\n\n      case \"knight\":\n        tempBoard[row][col] = new Knight(pieceColor, row, col);\n        break;\n\n      case \"king\":\n        tempBoard[row][col] = new King(pieceColor, row, col);\n\n        if (pieceColor === \"white\") whiteKingPos.current = [row, col];\n        else blackKingPos.current = [row, col];\n\n        break;\n\n      case \"pawn\":\n        tempBoard[row][col] = new Pawn(pieceColor, row, col);\n        break;\n\n      default:\n        break;\n    }\n\n    setBoard(tempBoard);\n  };\n\n  const dragHasEnded = (e: Event) => {\n    const ele = chessBoardRef.current as HTMLDivElement;\n    const eleRect = ele.getBoundingClientRect();\n\n    const targetRect = (e.target as HTMLElement).getBoundingClientRect();\n\n    // Calculate the top and left positions\n    const top = Math.abs(eleRect.top - targetRect.top);\n    const left = Math.abs(eleRect.left - targetRect.left);\n\n    const row = Math.floor(top / CELL_SIZE);\n    const col = Math.floor(left / CELL_SIZE);\n\n    if (row < 0 || row > 7 || col < 0 || col > 7) return;\n\n    if ((e.target as HTMLElement).tagName === \"DIV\") return;\n\n    let imgSrc = (e.target as HTMLElement).getAttribute(\"src\") as string;\n    let pieceColor, pieceName;\n\n    const possibleNames = imgSrc.slice(imgSrc.lastIndexOf(\"/\") + 1);\n\n    pieceColor = possibleNames.slice(0, 5) as ChessPieceColor;\n    pieceName = possibleNames\n      .split(\".\")[0]\n      .slice(5)\n      .toLowerCase()\n      .trim() as ChessPieceName;\n\n    putPieceOnBoard(pieceName, pieceColor, row, col);\n  };\n\n  const handleStartGame = () => {\n    // setGameStarted(true);\n    game = new ChessGame(\"white\", whiteKingPos.current, blackKingPos.current);\n    // console.log(game);\n    // console.log(board);\n\n    setTimeout(() => {\n      game.setInitiallyAttackedCells(board);\n    }, 500);\n  };\n\n  useEffect(() => {\n    game.setInitiallyAttackedCells(board);\n  }, []);\n\n  const resetBoard = (empty = true) => {\n    if (empty) setBoard(() => getEmptyMatrix(8));\n    else setBoard(() => getNewChessBoard());\n\n    // game = null;\n    setGameStarted(false);\n    setUserPieceColor(\"white\");\n  };\n\n  const showMoves = (row: number, col: number) => {\n    if (!gameOver.gameOver) {\n      let tempBoard = board.map(b => b);\n      let returnedValue = game?.showValidMoves(userPieceColor, tempBoard, row, col);\n\n      if (returnedValue) {\n        if (\"cellsClicked\" in returnedValue) {\n          const { cellsClicked, castlingDone, pawnPromoted } = returnedValue;\n\n          setUserPieceColor(c => (c === \"white\" ? \"black\" : \"white\"));\n\n          if (pawnPromoted) {\n            // the pawn has reached the other end of the board\n            // but hasn't yet been protomted and is still just a pawn\n            const pawn = tempBoard[cellsClicked.rows[1]][cellsClicked.cols[1]] as Pawn;\n\n            setShowPawnPromotionDialog({\n              show: true,\n              cellsClicked,\n              pawnColor: pawn.color\n            });\n          }\n        }\n      }\n\n      setBoard(tempBoard);\n\n      if (game?.isGameOver(board)) {\n        // const winnerName = game.winner === userPieceColor ? user.username : player2Name;\n\n        let newGameOverObject = {\n          gameOver: true,\n          winnerColor: game.winner,\n          winnerName: \"\"\n        };\n\n        setGameOver(newGameOverObject);\n      }\n    }\n  };\n\n  const btnStyles = (bg: string, c: string = \"white\") => ({\n    color: c,\n    backgroundColor: bg\n  });\n\n  const buttons = [\n    {\n      text: \"Start Game\",\n      clickHandler: () => {\n        handleStartGame();\n        // console.log(\"wrong\");\n      },\n      style: btnStyles(\"#16a085\")\n    },\n    {\n      text: \"Reset Board\",\n      clickHandler: () => {\n        resetBoard(true);\n      },\n      style: btnStyles(\"#c0392b\")\n    },\n    {\n      text: \"Default Board\",\n      clickHandler: () => {\n        resetBoard(false);\n      },\n      style: btnStyles(\"#2980b9\")\n    },\n    {\n      text: \"Get Moves String\",\n      clickHandler: () => {\n        console.log(game?.movesString);\n      },\n      style: btnStyles(\"#198510\")\n    },\n    {\n      text: \"Generate FEN\",\n      clickHandler: () => {\n        generateFenFromBoard(board);\n      },\n      style: btnStyles(\"#8e44ad\")\n    },\n    {\n      text: \"Save Game\",\n      clickHandler: () => {\n        const data = JSON.stringify({\n          player1: user.username,\n          player2: \"Johan\",\n          moves: game.getAllMoves()\n        });\n\n        axiosInstance\n          .post(\"/games/chess/savegame\", data, {\n            headers: {\n              \"content-type\": \"application/json\"\n            }\n          })\n          .then(resp => {\n            console.log(resp.data);\n          });\n      },\n      style: btnStyles(\"#1321e6\")\n    }\n  ];\n\n  return (\n    <motion.div\n      style={{\n        minWidth: \"100vw\",\n        minHeight: \"92vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n      <motion.div\n        style={{\n          position: \"relative\",\n          margin: \"2rem 0\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }}\n      >\n        {gameOver.gameOver && (\n          <GameOverComponent\n            winnerColor={gameOver.winnerColor as ChessPieceColor}\n            winnerName={gameOver.winnerName}\n          />\n        )}\n\n        {showPawnPromotionDialog.show && (\n          <PawnPromotionDialog\n            pawnColor={showPawnPromotionDialog.pawnColor as ChessPieceColor}\n            handlePawnPromotion={handlePawnPromotion}\n          />\n        )}\n        <motion.div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"relative\",\n            background: \"url(/images/chess/chessBoard.jpg)\",\n            objectFit: \"contain\",\n            backgroundSize: `${CELL_SIZE * board.length}px, ${CELL_SIZE * board.length}px`\n          }}\n          ref={chessBoardRef}\n        >\n          <RenderChessBoard\n            board={board}\n            chessBoardRef={chessBoardRef}\n            userPieceColor={userPieceColor}\n            testBoard={true}\n            movePiece={showMoves}\n          />\n        </motion.div>\n\n        <motion.div style={{ display: \"flex\" }}>\n          {[\"white\", \"black\"].map(color => (\n            <motion.div style={{ display: \"flex\", flexDirection: \"column\" }} key={color}>\n              {[\"King\", \"Queen\", \"Rook\", \"Bishop\", \"Knight\", \"Pawn\"].map(piece => (\n                <motion.div key={`${color}-${piece}`}>\n                  <motion.img\n                    drag\n                    onDragEnd={dragHasEnded}\n                    dragConstraints={{\n                      left: 0,\n                      right: 0,\n                      top: 0,\n                      bottom: 0\n                    }}\n                    dragTransition={{ bounceStiffness: 700, bounceDamping: 50 }}\n                    whileHover={{ cursor: \"grab\" }}\n                    dragElastic={1}\n                    src={`${window.location.origin}/images/chess/${color}${piece}.png`}\n                    alt={`white${piece}`}\n                  />\n                </motion.div>\n              ))}\n            </motion.div>\n          ))}\n        </motion.div>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n            marginLeft: \"2rem\",\n            minHeight: CELL_SIZE * 4 + \"px\"\n          }}\n        >\n          {buttons.map((btn, idx) => (\n            <Button\n              onClick={btn.clickHandler}\n              variant=\"contained\"\n              style={btn.style}\n              key={idx}\n            >\n              {btn.text}\n            </Button>\n          ))}\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n};\n\nexport default ChessPlayBoard;\n","import Pawn from \"../classes/chess/Pawn\";\nimport Rook from \"../classes/chess/Rook\";\nimport Knight from \"../classes/chess/Knight\";\nimport Bishop from \"../classes/chess/Bishop\";\nimport King from \"../classes/chess/King\";\nimport Queen from \"../classes/chess/Queen\";\nimport Piece from \"../classes/chess/ChessPiece\";\nimport { ChessBoardType, FenChars } from \"../types/chessTypes\";\n\nconst getPieceFromFenChar = (\n  char: FenChars,\n  row: number,\n  col: number,\n  canCastle: boolean\n) => {\n  switch (char) {\n    case \"r\":\n      return new Rook(\"black\", row, col);\n    case \"R\":\n      return new Rook(\"white\", row, col);\n\n    case \"p\":\n      return new Pawn(\"black\", row, col);\n\n    case \"P\":\n      return new Pawn(\"white\", row, col);\n\n    case \"k\":\n      return new King(\n        \"black\",\n        row,\n        col\n        // canCastle.canBlackCastleLeft,\n        // canCastle.canBlackCastleRight\n      );\n\n    case \"K\":\n      return new King(\n        \"white\",\n        row,\n        col\n        // canCastle.canWhiteCastleLeft,\n        // canCastle.canWhiteCastleRight\n      );\n\n    case \"b\":\n      return new Bishop(\"black\", row, col);\n    case \"B\":\n      return new Bishop(\"white\", row, col);\n\n    case \"n\":\n      return new Knight(\"black\", row, col);\n    case \"N\":\n      return new Knight(\"white\", row, col);\n\n    case \"q\":\n      return new Queen(\"black\", row, col);\n    case \"Q\":\n      return new Queen(\"white\", row, col);\n\n    default:\n      return 0;\n  }\n};\n\nexport const generateBoardFromFen = (fen: string, board: ChessBoardType, pgn: string) => {\n  // pgn is the solution, but not in pgn\n\n  const [actualFen, currentTurn, castlingRights, enPassant, zero, one] = fen.split(\" \");\n\n  let canCastle = {\n    canBlackCastleLeft: false,\n    canWhiteCastleLeft: false,\n    canBlackCastleRight: false,\n    canWhiteCastleRight: false\n  };\n\n  let blackKingPos, whiteKingPos;\n\n  if (castlingRights && castlingRights.length > 0) {\n    for (let i = 0; i < castlingRights.length; i++) {\n      let char = castlingRights[i];\n\n      if (char === \"K\") canCastle.canWhiteCastleRight = true;\n      if (char === \"Q\") canCastle.canWhiteCastleLeft = true;\n      if (char === \"k\") canCastle.canBlackCastleRight = true;\n      if (char === \"q\") canCastle.canBlackCastleLeft = true;\n    }\n  }\n\n  const whoseTurn = currentTurn === \"w\" ? \"white\" : \"black\";\n\n  let row = 0,\n    col = 0;\n\n  let tempBoard = board.map(b => b);\n\n  for (let i = 0; i < actualFen.length; i++) {\n    const char = actualFen[i];\n    let colIncremented = false;\n\n    if (!isNaN(parseInt(char))) {\n      // char is a number\n      col += Number(char);\n      colIncremented = true;\n      continue;\n    }\n\n    if (char !== \"/\" && isNaN(parseInt(char))) {\n      const piece = getPieceFromFenChar(char as FenChars, row, col, true);\n      tempBoard[row][col] = piece;\n\n      if (char === \"k\") {\n        blackKingPos = [row, col];\n      }\n\n      if (char === \"K\") {\n        whiteKingPos = [row, col];\n      }\n    }\n\n    if (char === \"/\") {\n      row++;\n      col = 0;\n    }\n\n    if (!colIncremented && char !== \"/\") col++;\n  }\n\n  // also gotta set the king's initial positions\n  // const game = new ChessGamePuzzle(whoseTurn, pgn, whiteKingPos, blackKingPos);\n\n  return { tempBoard };\n};\n\nexport const generateFenFromBoard = (board: ChessBoardType) => {\n  const fenHelp = {\n    king: \"k\",\n    queen: \"q\",\n    knight: \"n\",\n    pawn: \"p\",\n    rook: \"r\",\n    bishop: \"b\"\n  };\n  let fen = \"\";\n  let emptyColsPlaced = false;\n\n  for (let i = 0; i < board.length; i++) {\n    let emptyCols = 0;\n    if (i !== 0) fen += \"/\";\n\n    for (let j = 0; j < board.length; j++) {\n      let piece = board[i][j];\n\n      if (!(piece instanceof Piece)) {\n        emptyCols += 1;\n        emptyColsPlaced = false;\n      } else if (piece.color === \"black\") {\n        if (emptyCols !== 0) {\n          fen += String(emptyCols);\n          emptyCols = 0;\n          emptyColsPlaced = true;\n        }\n\n        fen += fenHelp[piece.pieceName];\n      } else if (piece.color === \"white\") {\n        if (emptyCols !== 0) {\n          fen += String(emptyCols);\n          emptyCols = 0;\n          emptyColsPlaced = true;\n        }\n\n        fen += fenHelp[piece.pieceName].toUpperCase();\n      }\n\n      if (emptyCols !== 0 && !emptyColsPlaced) {\n        if (j === 7) {\n          fen += String(emptyCols);\n        }\n      }\n    }\n  }\n  return fen;\n};\n","import {\n  ChessBoardType,\n  ChessPieceColor,\n  ChessPieceName,\n  PiecePosition\n} from \"../../types/chessTypes\";\nimport { ClickedCellsType } from \"../../types/games\";\nimport ChessGame from \"./ChessGame\";\n\nclass AnalysisBoard extends ChessGame {\n  movesList: ClickedCellsType[];\n  currentMove: number;\n  promotionMoveIndices: { [key: number]: ChessPieceName };\n\n  constructor(\n    moveList: ClickedCellsType[],\n    promotionMoveIndices: { [key: number]: ChessPieceName },\n    turn: ChessPieceColor = \"white\",\n    whiteKingPos: PiecePosition = [7, 4],\n    blackKingPos: PiecePosition = [0, 4]\n  ) {\n    super(turn, whiteKingPos, blackKingPos);\n\n    this.movesList = moveList;\n    this.promotionMoveIndices = promotionMoveIndices;\n    this.currentMove = 0;\n  }\n\n  playNextMove = (board: ChessBoardType) => {\n    if (this.currentMove >= this.movesList.length) return;\n\n    const moveToPlay = this.movesList[this.currentMove];\n\n    this.movePiece(board, moveToPlay);\n\n    if (this.currentMove in this.promotionMoveIndices) {\n      this.promotePawn(board, this.promotionMoveIndices[this.currentMove], moveToPlay);\n    }\n\n    this.currentMove++;\n  };\n}\n\nexport default AnalysisBoard;\n","export const socketEmitEvents = Object.freeze({\n  USER_PLAYED_A_MOVE: \"userPlayedAMove\",\n  JOIN_A_ROOM: \"joinRoom\",\n  SENT_CHAT_MESSAGE: \"sentChatMessage\",\n  CHECKERS_GAME_OVER: \"checkersGameOver\",\n  PAWN_PROMOTED: \"pawnPromoted\",\n  CASTLED: \"castled\",\n  CHESS_GAME_OVER: \"chessGameOver\",\n  BEGAN_PATH: \"beganPath\",\n  STROKED_PATH: \"strokedPath\",\n  STARTED_FILLING: \"startedFilling\",\n  START_SKETCHIO_GAME: \"startSketchioGame\"\n});\n\nexport const socketListenEvents = Object.freeze({\n  OPPONENT_PLAYED_A_MOVE: \"OPPONENT_PLAYED_A_MOVE\",\n\n  // chess\n  CHESS_COLOR_SELECTED: \"CHESS_COLOR_SELECTED\",\n  CHESS_PLAYER_2_JOINED: \"CHESS_PLAYER_2_JOINED\",\n  OPPONENT_PROMOTED_PAWN: \"OPPONENT_PROMOTED_PAWN\",\n  CHESS_GAME_OVER: \"CHESS_GAME_OVER\",\n  OPPONENT_CASTLED: \"OPPONENT_CASTLED\",\n\n  // checkers\n  CHECKERS_COLOR_SELECTED: \"CHECKERS_COLOR_SELECTED\",\n  CHECKERS_GAME_OVER: \"CHECKERS_GAME_OVER\",\n  CHECKERS_PLAYER_2_JOINED: \"CHCKERS_PLAYER_2_JOINED\",\n\n  // sketchio\n  BEGAN_PATH: \"BEGAN_PATH\",\n  STROKED_PATH: \"STROKED_PATH\",\n  STARTED_FILLING: \"STARTED_FILLING\",\n  SKETCH_IO_GAME_OVER: \"SKETCH_IO_GAME_OVER\",\n  SKETCHIO_PLAYER_JOINED: \"SKETCHIO_PLAYER_JOINED\",\n  NEW_PAINTER_SELECTED: \"NEW_PAINTER_SELECTED\",\n\n  // chat\n  RECEIVE_CHAT_MESSAGE: \"RECEIVE_CHAT_MESSAGE\",\n  USER_DISCONNECTED: \"USER_DISCONNECTED\"\n});\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  FilledInput,\n  FormControl,\n  InputLabel,\n  List,\n  ListItemText,\n  ListItem\n} from \"@material-ui/core\";\nimport { chatBoxStyles } from \"../../styles/gameScreenStyles\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { socketEmitEvents, socketListenEvents } from \"../../types/socketEvents\";\n\ninterface ChatMessage {\n  username: string;\n  color: string;\n  message: string;\n}\n\nconst Chat: React.FC = () => {\n  const { socket, user } = useTypedSelector(state => state);\n\n  const classes = chatBoxStyles();\n\n  const [messageText, setMessageText] = useState<string>(\"\");\n  const [messageList, setMessageList] = useState<ChatMessage[]>([]);\n\n  useEffect(() => {\n    if (socket) {\n      socket.on(socketListenEvents.RECEIVE_CHAT_MESSAGE, (chatMessage: ChatMessage) => {\n        setMessageList(m => [...m, chatMessage]);\n      });\n\n      socket.on(\"disconnect\", () => {\n        socket.emit(\"userDisconnected\", { username: user.username });\n      });\n    }\n  }, [socket]);\n\n  const sendMessage = () => {\n    if (messageText === \"\") return;\n\n    const newMessage: ChatMessage = {\n      username: user.username,\n      color: user.chatColor || \"red\",\n      message: messageText\n    };\n\n    setMessageList(m => [...m, newMessage]);\n\n    socket?.emit(socketEmitEvents.SENT_CHAT_MESSAGE, newMessage);\n\n    setMessageText(\"\");\n  };\n\n  return (\n    <div className={classes.root}>\n      <List dense={true} className={classes.messagesContainer}>\n        {messageList.map((msg: ChatMessage, idx) => (\n          <ListItem key={idx} style={{ wordBreak: \"break-all\" }}>\n            <span style={{ color: msg.color, marginRight: \"0.5rem\", width: \"20%\" }}>\n              {msg.username}\n            </span>\n            <span\n              style={{\n                width: \"80%\",\n                color:\n                  msg.username === \"BOT\"\n                    ? msg.message.includes(\"joined\") || msg.message.includes(\"correctly\")\n                      ? \"green\"\n                      : \"red\"\n                    : \"inherit\"\n              }}\n            >\n              {msg.message}\n            </span>\n          </ListItem>\n        ))}\n      </List>\n      <div className={classes.inputContainer}>\n        <FormControl style={{ width: \"100%\" }} variant=\"filled\">\n          <InputLabel htmlFor=\"chat-message-input-box\">Type you message</InputLabel>\n          <FilledInput\n            id=\"chat-message-input-box\"\n            fullWidth\n            value={messageText}\n            onChange={e => setMessageText(e.target.value)}\n            onKeyPress={e => {\n              if (e.key === \"Enter\") sendMessage();\n            }}\n          />\n        </FormControl>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import { ActionNames } from \"../../types/store/actionNames\";\nimport { SocketState } from \"../../types/store/storeTypes\";\n\nexport const setSocketAction = (socket: SocketState) => (dispatch: any) => {\n  dispatch({\n    type: ActionNames.SET_SOCKET,\n    payload: socket\n  });\n};\n","// react stuff\nimport React, { useState, useEffect } from \"react\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { useDispatch } from \"react-redux\";\n\n// actions\nimport { setSocketAction } from \"../../store/actions/socketActions\";\n\n// components\nimport GameOverComponent from \"../allGames/GameOverComponent\";\n\n// checkers\nimport CheckersGame from \"../../classes/checkers/CheckersGame\";\n\n// sockets\nimport { io } from \"socket.io-client\";\n\n// types\nimport { ClickedCellsType } from \"../../types/games\";\nimport { socketEmitEvents, socketListenEvents } from \"../../types/socketEvents\";\nimport { CheckersBoardType, CheckersPieceColor } from \"../../types/checkersTypes\";\nimport { SocketState } from \"../../types/store/storeTypes\";\nimport { useRef } from \"react\";\nimport { getNewCheckersBoard } from \"../../helpers/checkersBoard\";\nimport { updateGameDetailsApiCall } from \"../../helpers/updateGameDetails\";\nimport RenderCheckersBoard from \"./RenderCheckersBoard\";\n\nconst game = new CheckersGame();\nlet socket: SocketState;\n\ninterface CheckersBoardProps {\n  roomId: string;\n}\n\ninterface GameOverState {\n  gameOver: boolean;\n  winnerName: string;\n  winnerColor: CheckersPieceColor;\n}\n\nconst CheckersBoard: React.FC<CheckersBoardProps> = ({ roomId }) => {\n  const { user } = useTypedSelector(state => state);\n  const dispatch = useDispatch();\n\n  const [board, setBoard] = useState<CheckersBoardType>(() => getNewCheckersBoard());\n\n  const [gameOver, setGameOver] = useState<GameOverState>({\n    gameOver: false,\n    winnerName: \"\",\n    winnerColor: \"\" as CheckersPieceColor\n  });\n\n  const [userPieceColor, setUserPieceColor] = useState<CheckersPieceColor>(\"white\");\n  const [player2Name, setPlayer2Name] = useState<string>('\"No one else is here\"');\n\n  const checkersBoardRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    socket = io(\"http://localhost:8000\");\n\n    socket.emit(socketEmitEvents.JOIN_A_ROOM, {\n      roomId: `checkers_${roomId}`,\n      username: user.username\n    });\n\n    dispatch(setSocketAction(socket));\n  }, []);\n\n  useEffect(() => {\n    socket.on(\n      socketListenEvents.OPPONENT_PLAYED_A_MOVE,\n      (cellsClicked: ClickedCellsType) => {\n        let tempBoard = board.map(b => b);\n\n        game.movePiece(tempBoard, cellsClicked);\n\n        setBoard(tempBoard);\n      }\n    );\n\n    socket.on(\n      socketListenEvents.CHECKERS_COLOR_SELECTED,\n      (data: { color: CheckersPieceColor }) => {\n        setUserPieceColor(data.color);\n      }\n    );\n\n    socket.on(\n      socketListenEvents.CHECKERS_PLAYER_2_JOINED,\n      (data: { users: string[] }) => {\n        setPlayer2Name(data.users.filter(username => username !== user.username)[0]);\n      }\n    );\n\n    socket.on(socketListenEvents.CHECKERS_GAME_OVER, (gameOverObject: GameOverState) => {\n      setGameOver(gameOverObject);\n    });\n  }, []);\n\n  const showMoves = (row: number, col: number) => {\n    if (!gameOver.gameOver) {\n      let tempBoard = board.map(b => b);\n      let cellsClicked = game.showValidMoves(userPieceColor, tempBoard, row, col);\n      setBoard(tempBoard);\n\n      if (cellsClicked && cellsClicked.rows.length === 2) {\n        socket.emit(socketEmitEvents.USER_PLAYED_A_MOVE, cellsClicked);\n      }\n\n      let isGameOver = game.isGameOver(board);\n\n      if (isGameOver) {\n        const winnerName = game.winner === userPieceColor ? user.username : player2Name;\n\n        let newGameOverObject = {\n          gameOver: true,\n          winnerColor: game.winner as CheckersPieceColor,\n          winnerName\n        };\n\n        socket.emit(socketEmitEvents.CHECKERS_GAME_OVER, newGameOverObject);\n\n        updateGameDetailsApiCall(user.username, \"checkers\", {\n          won: winnerName === user.username,\n          lost: winnerName !== user.username\n        });\n\n        updateGameDetailsApiCall(player2Name, \"checkers\", {\n          won: winnerName === player2Name,\n          lost: winnerName !== player2Name\n        });\n\n        setGameOver(newGameOverObject);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div style={{ height: \"2rem\" }}>\n        <h3>{player2Name}</h3>\n      </div>\n      <div id=\"checkersBoard\" style={{ position: \"relative\" }}>\n        {gameOver.gameOver && (\n          <GameOverComponent\n            winnerColor={gameOver.winnerColor}\n            winnerName={gameOver.winnerName}\n          />\n        )}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: userPieceColor === \"red\" ? \"column\" : \"column-reverse\"\n          }}\n          ref={checkersBoardRef}\n        >\n          <RenderCheckersBoard\n            board={board}\n            checkersBoardRef={checkersBoardRef}\n            userPieceColor={userPieceColor}\n            testBoard={false}\n            movePiece={showMoves}\n          />\n        </div>\n      </div>\n      <div style={{ height: \"2rem\", padding: \"0.5rem 0\" }}>\n        <h3>{user.username}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckersBoard;\n","// react stuff\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\n// components\nimport GameOverComponent from \"../allGames/GameOverComponent\";\nimport PawnPromotionDialog from \"./PawnPromotionDialog\";\n\n// gameplay\nimport ChessGame from \"../../classes/chess/ChessGame\";\nimport Pawn from \"../../classes/chess/Pawn\";\n\n// types\nimport {\n  ChessBoardType,\n  ChessPieceColor,\n  ChessPieceName,\n  ChessWinner\n} from \"../../types/chessTypes\";\nimport { CheckersPieceColor } from \"../../types/checkersTypes\";\nimport { CELL_SIZE, ClickedCellsType, UpdateGameDetails } from \"../../types/games\";\nimport { io } from \"socket.io-client\";\nimport { RouteProps } from \"../../types/routeProps\";\nimport { socketEmitEvents, socketListenEvents } from \"../../types/socketEvents\";\nimport { SocketState } from \"../../types/store/storeTypes\";\nimport { setSocketAction } from \"../../store/actions/socketActions\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { updateUserSocketDetails } from \"../../store/actions/userActions\";\nimport { getNewChessBoard } from \"../../helpers/chessHelpers\";\nimport { updateGameDetailsApiCall } from \"../../helpers/updateGameDetails\";\nimport RenderChessBoard from \"./RenderChessBoard\";\n\nconst game = new ChessGame();\nlet socket: SocketState;\n\ninterface ChessBoardProps extends RouteProps {\n  roomId: string;\n}\n\ninterface GameOverInterface {\n  gameOver: boolean;\n  winnerName: string;\n  winnerColor: ChessWinner;\n}\n\nconst ChessBoard: React.FC<ChessBoardProps> = ({ roomId }) => {\n  const dispatch = useDispatch();\n  const user = useTypedSelector(state => state.user);\n\n  const [board, setBoard] = useState<ChessBoardType>(() => getNewChessBoard());\n  const [userPieceColor, setUserPieceColor] = useState<ChessPieceColor>(\"white\");\n  const [player2Name, setPlayer2Name] = useState<string>('\"No one else is here\"');\n\n  const [gameOver, setGameOver] = useState<GameOverInterface>({\n    gameOver: false,\n    winnerName: \"\",\n    winnerColor: \"\" as ChessPieceColor\n  });\n\n  const [showPawnPromotionDialog, setShowPawnPromotionDialog] = useState<{\n    show: boolean;\n    cellsClicked: ClickedCellsType;\n    pawnColor: ChessPieceColor | \"\";\n  }>({\n    show: false,\n    cellsClicked: {} as ClickedCellsType,\n    pawnColor: \"\"\n  });\n\n  const chessBoardRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    socket = io(\"http://localhost:8000\");\n\n    socket.emit(socketEmitEvents.JOIN_A_ROOM, {\n      roomId: `chess_${roomId}`,\n      username: user.username\n    });\n\n    dispatch(setSocketAction(socket));\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    socket.on(\n      socketListenEvents.OPPONENT_PLAYED_A_MOVE,\n      (cellsClicked: ClickedCellsType) => {\n        let tempBoard = board.map(b => b);\n        game.movePiece(tempBoard, cellsClicked);\n        setBoard(tempBoard);\n      }\n    );\n\n    socket.on(\n      socketListenEvents.CHESS_COLOR_SELECTED,\n      (data: { color: ChessPieceColor; chatColor: string }) => {\n        setUserPieceColor(data.color);\n        dispatch(updateUserSocketDetails({ ...user, chatColor: data.chatColor }));\n      }\n    );\n\n    socket.on(socketListenEvents.CHESS_GAME_OVER, (data: GameOverInterface) => {\n      setGameOver(data);\n    });\n\n    socket.on(\n      socketListenEvents.OPPONENT_PROMOTED_PAWN,\n      (data: { pieceName: ChessPieceName; cellsClicked: ClickedCellsType }) => {\n        const { pieceName, cellsClicked } = data;\n\n        let tempBoard = board.map(b => b);\n        game.promotePawn(tempBoard, pieceName, cellsClicked);\n        setBoard(tempBoard);\n      }\n    );\n\n    socket.on(socketListenEvents.OPPONENT_CASTLED, (cellsClicked: ClickedCellsType) => {\n      let tempBoard = board.map(b => b);\n      game.movePiece(tempBoard, cellsClicked);\n      setBoard(tempBoard);\n    });\n\n    socket.on(socketListenEvents.CHESS_PLAYER_2_JOINED, (data: { users: string[] }) => {\n      setPlayer2Name(data.users.filter(username => username !== user.username)[0]);\n    });\n\n    // eslint-disable-next-line\n  }, []);\n\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    game.setInitiallyAttackedCells(board);\n  }, []);\n\n  const handlePawnPromotion = (pieceName: ChessPieceName) => {\n    let { cellsClicked } = showPawnPromotionDialog;\n    let tempBoard = board.map(b => b);\n\n    socket.emit(socketEmitEvents.PAWN_PROMOTED, { pieceName, cellsClicked });\n\n    // the pawn has been moved at this point\n    if (cellsClicked) game.promotePawn(tempBoard, pieceName, cellsClicked);\n\n    setBoard(tempBoard);\n\n    setShowPawnPromotionDialog({\n      show: false,\n      cellsClicked: {} as ClickedCellsType,\n      pawnColor: \"\"\n    });\n  };\n\n  const showMoves = (row: number, col: number) => {\n    if (!gameOver.gameOver) {\n      let tempBoard = board.map(b => b);\n      let returnedValue = game.showValidMoves(userPieceColor, tempBoard, row, col);\n\n      if (returnedValue) {\n        if (\"cellsClicked\" in returnedValue) {\n          const { cellsClicked, castlingDone, pawnPromoted } = returnedValue;\n\n          // socket.emit(socketEmitEvents.USER_PLAYED_A_MOVE, cellsClicked);\n\n          if (!castlingDone && !pawnPromoted) {\n            socket.emit(socketEmitEvents.USER_PLAYED_A_MOVE, cellsClicked);\n          }\n          if (castlingDone) {\n            socket.emit(socketEmitEvents.CASTLED, cellsClicked);\n          }\n          if (pawnPromoted) {\n            // the pawn has reached the other end of the board\n            // but hasn't yet been protomted and is still just a pawn\n            const pawn = tempBoard[cellsClicked.rows[1]][cellsClicked.cols[1]] as Pawn;\n\n            setShowPawnPromotionDialog({\n              show: true,\n              cellsClicked,\n              pawnColor: pawn.color\n            });\n          }\n        }\n      }\n\n      setBoard(tempBoard);\n\n      if (game.isGameOver(board)) {\n        const winnerName = game.winner === userPieceColor ? user.username : player2Name;\n\n        let newGameOverObject = {\n          gameOver: true,\n          winnerColor: game.winner,\n          winnerName\n        };\n\n        socket.emit(socketEmitEvents.CHESS_GAME_OVER, newGameOverObject);\n\n        updateGameDetailsApiCall(user.username, \"chess\", {\n          won: winnerName === user.username,\n          lost: winnerName !== user.username,\n          drawn: ![\"white\", \"black\"].includes(game.winner)\n        });\n\n        updateGameDetailsApiCall(player2Name, \"chess\", {\n          won: winnerName === player2Name,\n          lost: winnerName !== player2Name,\n          drawn: ![\"white\", \"black\"].includes(game.winner)\n        });\n\n        setGameOver(newGameOverObject);\n      }\n    }\n  };\n\n  return (\n    <div style={{ margin: windowSize[0] < 910 ? \"2rem 0\" : \"\" }}>\n      <div style={{ height: \"2rem\" }}>\n        <h3>{player2Name}</h3>\n      </div>\n\n      <div\n        id=\"checkersBoard\"\n        style={{\n          position: \"relative\",\n          background: \"url(/images/chess/chessBoard.jpg)\",\n          objectFit: \"contain\",\n          backgroundSize: `${CELL_SIZE * board.length}px, ${CELL_SIZE * board.length}px`\n        }}\n      >\n        {gameOver.gameOver && (\n          <GameOverComponent\n            winnerColor={gameOver.winnerColor as ChessPieceColor | CheckersPieceColor}\n            winnerName={gameOver.winnerName}\n          />\n        )}\n\n        {showPawnPromotionDialog.show && (\n          <PawnPromotionDialog\n            pawnColor={showPawnPromotionDialog.pawnColor as ChessPieceColor}\n            handlePawnPromotion={handlePawnPromotion}\n          />\n        )}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: userPieceColor === \"white\" ? \"column\" : \"column-reverse\"\n          }}\n          ref={chessBoardRef}\n        >\n          <RenderChessBoard\n            board={board}\n            chessBoardRef={chessBoardRef}\n            userPieceColor={userPieceColor}\n            testBoard={false}\n            movePiece={showMoves}\n          />\n        </div>\n      </div>\n      <div style={{ height: \"2rem\", padding: \"0.5rem 0\" }}>\n        <h3>{user.username}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(ChessBoard);\n","// react\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\n// hooks\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport useWindowSize from \"../../hooks/useWindowSize\";\n\n//styles\nimport { chatBoxStyles } from \"../../styles/gameScreenStyles\";\nimport \"../../styles/Canvas.css\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\n\n// redux\nimport { setSocketAction } from \"../../store/actions/socketActions\";\n\n// types\nimport { SocketState } from \"../../types/store/storeTypes\";\nimport { socketEmitEvents, socketListenEvents } from \"../../types/socketEvents\";\nimport { RouteProps } from \"../../types/routeProps\";\n\nimport SketchIO from \"../../classes/sketchio/SketchIO\";\nimport { io } from \"socket.io-client\";\n\nlet sketchIO: SketchIO;\nlet socket: SocketState;\n\ninterface CanvasComponentProps extends RouteProps {\n  roomId: string;\n}\n\ninterface SketchIOUserInfo {\n  username: string;\n  points: number;\n}\n\ninterface CurrentPainterInfo {\n  newPainter: SketchIOUserInfo;\n  newWord: string;\n}\n\nconst CanvasComponent: React.FC<CanvasComponentProps> = ({ roomId }) => {\n  const dispatch = useDispatch();\n  const { user } = useTypedSelector(state => state);\n\n  const classes = chatBoxStyles();\n\n  const [windowWidth, windowHeight] = useWindowSize();\n  const bigScreen = windowWidth > 1300;\n\n  const paintFillButton = useRef<HTMLButtonElement>(null);\n  const canvasContainer = useRef<HTMLDivElement | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n  const [canvasDimensions, setCanvasDimensions] = useState({\n    width: 0,\n    height: windowHeight * 0.8\n  });\n\n  const [playersInRoom, setPlayersInRoom] = useState<SketchIOUserInfo[]>([\n    { username: user.username, points: 0 }\n  ]);\n\n  const [currentPainter, setCurrentPainter] = useState<CurrentPainterInfo>(\n    {} as CurrentPainterInfo\n  );\n\n  const [gameStarted, setGameStarted] = useState(false);\n  const [isUserPainter, setIsUserPainter] = useState(false);\n\n  useEffect(() => {\n    console.log(\"use effect to set isuserpainter\");\n    if (currentPainter.newPainter)\n      setIsUserPainter(currentPainter.newPainter.username === user.username);\n    else setIsUserPainter(false);\n  }, [currentPainter, user]);\n\n  useEffect(() => {\n    if (canvasContainer.current) {\n      setCanvasDimensions({\n        width: canvasContainer.current.offsetWidth,\n        height: windowHeight * 0.9\n      });\n    }\n  }, [canvasContainer, windowHeight, windowWidth]);\n\n  useEffect(() => {\n    socket = io(\"http://localhost:8000\");\n\n    socket.emit(socketEmitEvents.JOIN_A_ROOM, {\n      roomId: `sketchio_${roomId}`,\n      username: user.username\n    });\n\n    dispatch(setSocketAction(socket));\n\n    const canvas = document.getElementById(\"drawingCanvas\") as HTMLCanvasElement;\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    setCanvasCursor(\"paint\");\n\n    sketchIO = new SketchIO(canvas, ctx, socket);\n    sketchIO.enableCanvas();\n\n    return () => {\n      sketchIO.disableCanvas();\n    };\n  }, []);\n\n  useEffect(() => {\n    socket.on(\n      socketListenEvents.SKETCHIO_PLAYER_JOINED,\n      (data: { allUsersInRoom: SketchIOUserInfo[] }) => {\n        console.log(data);\n        setPlayersInRoom(data.allUsersInRoom);\n      }\n    );\n\n    socket.on(socketListenEvents.NEW_PAINTER_SELECTED, (data: CurrentPainterInfo) => {\n      setCurrentPainter(data);\n\n      if (!gameStarted) setGameStarted(true);\n    });\n\n    socket.on(socketListenEvents.BEGAN_PATH, (data: { x: number; y: number }) => {\n      sketchIO.beginPath(data.x, data.y);\n    });\n\n    socket.on(\n      socketListenEvents.STROKED_PATH,\n      (data: { x: number; y: number; color: string }) => {\n        sketchIO.drawPath(data.x, data.y, data.color);\n      }\n    );\n\n    socket.on(socketListenEvents.STARTED_FILLING, (data: { color: string }) => {\n      sketchIO.fill(data.color);\n    });\n  }, []);\n\n  const colors = [\n    \"white\",\n    \"black\",\n    \"#27ae60\",\n    \"#2980b9\",\n    \"#16a085\",\n    \"#d63031\",\n    \"#f1c40f\"\n  ];\n\n  const setCanvasCursor = (cursor: \"fill\" | \"paint\") => {\n    if (cursor === \"fill\") {\n      (\n        canvasRef?.current as HTMLCanvasElement\n      ).style.cursor = `url(\"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='24px' height='24px' fill='white' stroke='black' viewBox='0 0 24 24' xml:space='preserve'%3E %3Cpath d='M16.56 8.94L7.62 0 6.21 1.41l2.38 2.38-5.15 5.15c-.59.59-.59 1.54 0 2.12l5.5 5.5c.29.29.68.44 1.06.44s.77-.15 1.06-.44l5.5-5.5c.59-.58.59-1.53 0-2.12zM5.21 10L10 5.21 14.79 10H5.21zM19 11.5s-2 2.17-2 3.5c0 1.1.9 2 2 2s2-.9 2-2c0-1.33-2-3.5-2-3.5z'/%3E %3C/svg%3E\"), auto`;\n    } else {\n      (\n        canvasRef?.current as HTMLCanvasElement\n      ).style.cursor = `url(\"data:image/svg+xml,%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='24px' height='24px' fill='white' stroke='black' stroke-width='1' viewBox='0 0 24 24' xml:space='preserve'%3E %3Cpath d='M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z'/%3E %3C/svg%3E\") 0 24, auto`;\n    }\n  };\n\n  const handleButtonClick = () => {\n    if (!paintFillButton.current) return;\n\n    sketchIO.toggleFillPaint();\n\n    if (sketchIO.getPainting()) {\n      paintFillButton.current.innerText = \"Fill\";\n      setCanvasCursor(\"paint\");\n    }\n\n    if (sketchIO.getFilling()) {\n      paintFillButton.current.innerText = \"Paint\";\n      setCanvasCursor(\"fill\");\n    }\n  };\n\n  const changeCanvasColor = (color: string) => {\n    sketchIO.changeCanvasColor(color);\n  };\n\n  const startSketchioGame = () => {\n    socket.emit(socketEmitEvents.START_SKETCHIO_GAME, { room_id: roomId });\n    setGameStarted(true);\n  };\n\n  return (\n    <div className=\"canvasSuperContainer\">\n      <List\n        dense={true}\n        className={classes.messagesContainer}\n        style={{\n          alignSelf: \"flex-start\",\n          height: canvasDimensions.height + \"px\",\n          minWidth: \"10rem\",\n          width: \"20%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\"\n        }}\n      >\n        <div style={{ maxHeight: \"10%\" }}>\n          {currentPainter.newPainter && (\n            <ListItem\n              style={{\n                wordBreak: \"break-all\",\n                marginBottom: \"2rem\",\n                color: isUserPainter ? \"#27ae60\" : \"#f1c40f\"\n              }}\n            >\n              {isUserPainter\n                ? `You are Painting. Paint ${currentPainter.newWord}`\n                : `${currentPainter.newPainter.username} is painting`}\n            </ListItem>\n          )}\n        </div>\n\n        <div style={{ minHeight: \"80%\" }}>\n          <ListItem style={{ wordBreak: \"break-all\", margin: \"2rem 0\" }}>\n            <h2>Points</h2>\n          </ListItem>\n\n          {playersInRoom.map(player => (\n            <ListItem\n              style={{ wordBreak: \"break-all\", borderBottom: \"1px solid white\" }}\n              key={player.username}\n            >\n              <h3 style={{ width: \"75%\" }}>{player.username}</h3>\n              <div style={{ width: \"5%\" }}></div>\n              <h3 style={{ width: \"20%\" }}>{player.points}</h3>\n            </ListItem>\n          ))}\n        </div>\n\n        <ListItem style={{ justifySelf: \"flex-end\", alignSelf: \"flex-end\" }}>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            style={{\n              backgroundColor: \"#128277\",\n              color: \"white\",\n              opacity: gameStarted ? 0.6 : 1\n            }}\n            onClick={startSketchioGame}\n            disabled={gameStarted}\n          >\n            Start Game\n          </Button>\n        </ListItem>\n      </List>\n\n      <div className=\"canvasContainer\" style={{ width: \"70%\" }} ref={canvasContainer}>\n        <div id=\"sketchInfo\"></div>\n        <canvas\n          id=\"drawingCanvas\"\n          width={canvasDimensions.width}\n          height={canvasDimensions.height}\n          ref={canvasRef}\n        />\n      </div>\n      {isUserPainter && (\n        <div\n          className=\"colorsContainer\"\n          style={\n            bigScreen\n              ? { maxWidth: \"10%\", height: canvasDimensions.height + \"px\" }\n              : {\n                  width: \"100%\",\n                  flexDirection: \"row\"\n                }\n          }\n        >\n          {colors.map(color => (\n            <div\n              onClick={() => changeCanvasColor(color)}\n              className=\"color\"\n              style={{ backgroundColor: color }}\n              key={color}\n            ></div>\n          ))}\n          <div id=\"sketchIOButton\">\n            <Button\n              ref={paintFillButton}\n              onClick={handleButtonClick}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Fill\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default withRouter(CanvasComponent);\n","import { AxiosRequestConfig } from \"axios\";\nimport { axiosInstance } from \"../config/axiosConfig\";\nimport { UpdateGameDetails } from \"../types/games\";\n\nexport const updateGameDetailsApiCall = (\n  username: string,\n  game: \"chess\" | \"checkers\",\n  object: {\n    won?: boolean;\n    lost?: boolean;\n    drawn?: boolean;\n    started?: boolean;\n  }\n) => {\n  const data: UpdateGameDetails = {\n    won: false,\n    lost: false,\n    drawn: false,\n    started: false,\n    ...object\n  };\n\n  const url = `/games/${game}/${username}`;\n\n  const config: AxiosRequestConfig = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  };\n\n  axiosInstance.post(url, data, config);\n};\n","import React from \"react\";\n\nexport const svgNames: { [key: string]: string } = Object.freeze({\n  copyIcon: \"copyIcon\",\n  paintFill: \"paintFill\"\n});\n\nconst svgs: { [key: string]: JSX.Element } = Object.freeze({\n  [svgNames.copyIcon]: (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      width=\"24\"\n      height=\"24\"\n      tabIndex={-1}\n      fill=\"white\"\n      style={{ outline: \"none\", border: \"none\" }}\n    >\n      <path d=\"M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z\"></path>\n    </svg>\n  ),\n  [svgNames.paintFill]: (\n    <svg\n      focusable=\"false\"\n      viewBox=\"0 0 24 24\"\n      aria-hidden=\"true\"\n      tabIndex={-1}\n      data-ga-event-category=\"material-icons\"\n      data-ga-event-action=\"click\"\n      data-ga-event-label=\"FormatColorFill\"\n    >\n      <path d=\"M16.56 8.94L7.62 0 6.21 1.41l2.38 2.38-5.15 5.15c-.59.59-.59 1.54 0 2.12l5.5 5.5c.29.29.68.44 1.06.44s.77-.15 1.06-.44l5.5-5.5c.59-.58.59-1.53 0-2.12zM5.21 10L10 5.21 14.79 10H5.21zM19 11.5s-2 2.17-2 3.5c0 1.1.9 2 2 2s2-.9 2-2c0-1.33-2-3.5-2-3.5z\"></path>\n    </svg>\n  )\n});\n\ninterface SVGProps {\n  svgName: string;\n}\n\nconst SVG: React.FC<SVGProps> = ({ svgName }) => {\n  if (svgName in svgs) return svgs[svgName];\n\n  return <span>404</span>;\n};\n\nexport default SVG;\n","import React, { useRef } from \"react\";\n\nimport {\n  FilledInput,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  FormControl\n} from \"@material-ui/core/\";\nimport SVG, { svgNames } from \"../Svg\";\nimport { roomIdInputStyles } from \"../../styles/gameScreenStyles\";\n\ninterface RoomIdProps {\n  roomId: string;\n}\n\nconst RoomId: React.FC<RoomIdProps> = ({ roomId }) => {\n  const roomIdElement = useRef<HTMLInputElement>(null);\n\n  const copyRoomId = () => {\n    (roomIdElement.current as HTMLInputElement).querySelector(\"input\")!.select();\n    document.execCommand(\"copy\");\n  };\n\n  const roomIdStyles = roomIdInputStyles();\n\n  return (\n    <FormControl className={roomIdStyles.root}>\n      <InputLabel htmlFor=\"outlined-adornment-password\">Room Id</InputLabel>\n      <FilledInput\n        id=\"standard-read-only-input\"\n        fullWidth\n        defaultValue={roomId}\n        readOnly\n        ref={roomIdElement}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton onClick={copyRoomId} edge=\"end\">\n              <SVG svgName={svgNames.copyIcon} />\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n\nexport default RoomId;\n","import { History } from \"history\";\nimport { useEffect } from \"react\";\nimport { useTypedSelector } from \"./useTypedSelector\";\n\nconst useUserPresent = (history: History<unknown>) => {\n  const { user } = useTypedSelector(state => state);\n\n  useEffect(() => {\n    if (Object.keys(user).length === 0) {\n      history.push(\"/\");\n    }\n  }, [history, user]);\n};\n\nexport default useUserPresent;\n","import React from \"react\";\nimport Chat from \"../components/allGames/Chat\";\nimport CheckersBoard from \"../components/checkers/CheckersBoard\";\nimport RoomId from \"../components/allGames/RoomId\";\nimport useUserPresent from \"../hooks/useUserPresent\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport { boardStyles, chatStyles, wrapperDivStyles } from \"../styles/gameScreenStyles\";\nimport { RouteProps } from \"../types/routeProps\";\n\ninterface CheckersScreenProps extends RouteProps {}\n\nconst CheckersScreen: React.FC<CheckersScreenProps> = ({ match, history }) => {\n  useUserPresent(history);\n\n  const [windowWidth] = useWindowSize();\n  const bigScreen = windowWidth > 1000;\n\n  return (\n    <div style={{ ...wrapperDivStyles, flexDirection: bigScreen ? \"row\" : \"column\" }}>\n      <div style={boardStyles}>\n        <CheckersBoard roomId={match.params.roomId as string} />\n      </div>\n\n      <div\n        style={{\n          ...chatStyles,\n          minWidth: bigScreen ? \"35%\" : \"50%\",\n          maxWidth: bigScreen ? \"35%\" : \"50%\"\n        }}\n      >\n        <RoomId roomId={match.params.roomId as string} />\n        <Chat />\n      </div>\n    </div>\n  );\n};\n\nexport default CheckersScreen;\n","import { axiosInstance } from \"../../config/axiosConfig\";\nimport { ActionNames } from \"../../types/store/actionNames\";\nimport { UserState } from \"../../types/store/storeTypes\";\n\nexport const userLoginAction = (userData: object) => async (dispatch: any) => {\n  const login = await axiosInstance.post(\"/user/login\", userData);\n\n  if (login.data.success) {\n    dispatch({\n      type: ActionNames.USER_LOGIN,\n      payload: login.data.user\n    });\n  }\n};\n\nexport const updateUserSocketDetails = (userData: UserState) => (dispatch: any) => {\n  console.log({ userData });\n  dispatch({\n    type: ActionNames.UPDATE_USER_SOCKET_DETAILS,\n    payload: userData\n  });\n};\n\nexport const updateProfilePicAction = (profilePictureUrl: string) => (dispatch: any) => {\n  dispatch({\n    type: ActionNames.UPDATE_USER_PROFILE_PICTURE,\n    payload: profilePictureUrl\n  });\n};\n\nexport const userLogoutAction = () => (dispatch: any) => {\n  dispatch({\n    type: ActionNames.USER_LOGOUT\n  });\n};\n","import React from \"react\";\nimport ChessBoard from \"../components/chess/ChessBoard\";\nimport { RouteProps } from \"../types/routeProps\";\n\nimport { boardStyles, chatStyles, wrapperDivStyles } from \"../styles/gameScreenStyles\";\nimport RoomId from \"../components/allGames/RoomId\";\nimport Chat from \"../components/allGames/Chat\";\nimport useUserPresent from \"../hooks/useUserPresent\";\nimport useWindowSize from \"../hooks/useWindowSize\";\n\ninterface ChessScreenProps extends RouteProps {}\n\nconst ChessScreen: React.FC<ChessScreenProps> = ({ match, history }) => {\n  useUserPresent(history);\n\n  const [windowWidth] = useWindowSize();\n  const bigScreen = windowWidth > 1000;\n\n  return (\n    <div style={{ ...wrapperDivStyles, flexDirection: bigScreen ? \"row\" : \"column\" }}>\n      <div style={boardStyles}>\n        <ChessBoard roomId={match.params.roomId as string} />\n      </div>\n\n      <div\n        style={{\n          ...chatStyles,\n          minWidth: bigScreen ? \"35%\" : \"50%\",\n          maxWidth: bigScreen ? \"35%\" : \"50%\"\n        }}\n      >\n        <RoomId roomId={match.params.roomId as string} />\n        <Chat />\n      </div>\n    </div>\n  );\n};\n\nexport default ChessScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport { Games } from \"../types/games\";\n\nimport { v4 as uuid } from \"uuid\";\n\n// material UI\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { OutlinedInput, InputLabel, FormControl } from \"@material-ui/core\";\nimport { RouteProps } from \"../types/routeProps\";\n\ninterface GameCardProps extends RouteProps {\n  gameName: Games;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 225,\n    backgroundColor: \"#0b1622\",\n    color: \"rgb(200, 200, 200) !important\"\n  },\n  actionArea: {\n    minWidth: \"100%\"\n  },\n  media: {\n    height: 225,\n    objectFit: \"contain\"\n  }\n});\n\nconst GameCard: React.FC<GameCardProps> = ({ gameName, history }) => {\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [roomId, setRoomId] = useState<string>(\"\");\n  const [enterButtonDisabled, setEnterButtonDisabled] = useState<boolean>(true);\n\n  const toggleModal = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  const linkStyles = {\n    textDecoration: \"none\"\n  };\n\n  let imageUrl: string = `/images/${gameName}.jpg`;\n\n  const newClasses = makeStyles(theme => ({\n    root: {\n      \"& .MuiInputBase-input.MuiOutlinedInput-input\": {\n        color: \"black !important\",\n        display: \"flex\"\n      },\n      \"& label.MuiInputLabel-root.MuiInputLabel-formControl.MuiInputLabel-animated.MuiInputLabel-outlined\":\n        {\n          color: \"black !important\"\n        },\n      \"& legend.PrivateNotchedOutline-legend-22\": {\n        color: \"black\"\n      },\n      \"& .MuiInput-underline:after\": {\n        borderBottomColor: \"black\"\n      },\n      \"& .MuiOutlinedInput-root\": {\n        \"& fieldset\": {\n          borderColor: \"black\"\n        },\n        \"&:hover fieldset\": {\n          borderColor: \"black\"\n        },\n        \"&.Mui-focused fieldset\": {\n          borderColor: \"black\"\n        }\n      }\n    },\n    actionArea: {\n      display: \"flex\"\n    }\n  }))();\n\n  const enterRoom = () => {\n    toggleModal();\n    history.push(`${gameName}/${roomId}`);\n  };\n\n  useEffect(() => {\n    setEnterButtonDisabled(roomId.trim().length === 0);\n  }, [roomId]);\n\n  return (\n    <>\n      <Card className={classes.root} style={{ margin: \"1rem 0\" }}>\n        <CardActionArea className={classes.actionArea}>\n          <CardMedia className={classes.media} image={imageUrl} title={gameName} />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              {gameName}\n            </Typography>\n            <Typography variant=\"body2\" component=\"h4\">\n              Play {gameName}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Link to={`/${gameName}/${uuid()}`} style={linkStyles}>\n            <Button size=\"small\" style={{ color: \"green\" }}>\n              Create Room\n            </Button>\n          </Link>\n          <Button size=\"small\" style={{ color: \"red\" }} onClick={toggleModal}>\n            Join Room\n          </Button>\n        </CardActions>\n      </Card>\n\n      {modalOpen && (\n        <div\n          style={{\n            position: \"fixed\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n            backgroundColor: \"white\",\n            borderRadius: \"1rem\",\n            boxShadow: \"0 0 10px black\",\n            zIndex: 100\n          }}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogTitle style={{ color: \"black\" }}>Enter Room Id</DialogTitle>\n          <DialogContent className={newClasses.root}>\n            <FormControl variant=\"outlined\">\n              <InputLabel htmlFor=\"room-id\">Room Id</InputLabel>\n              <OutlinedInput\n                id=\"room-id\"\n                type=\"text\"\n                required\n                value={roomId}\n                onChange={e => setRoomId(e.target.value)}\n                labelWidth={70}\n                fullWidth\n              />\n            </FormControl>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={toggleModal} style={{ color: \"red\" }}>\n              Cancel\n            </Button>\n            <Button\n              onClick={enterRoom}\n              style={{ color: \"green\", opacity: enterButtonDisabled ? 0.6 : 1 }}\n              disabled={enterButtonDisabled}\n            >\n              Enter Room\n            </Button>\n          </DialogActions>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(GameCard);\n","import React from \"react\";\nimport GameCard from \"../components/GameCard\";\nimport useUserPresent from \"../hooks/useUserPresent\";\nimport { Games } from \"../types/games\";\nimport { RouteProps } from \"../types/routeProps\";\n\ninterface GamesScreenProps extends RouteProps {}\n\nconst GamesScreen: React.FC<GamesScreenProps> = ({ history }) => {\n  useUserPresent(history);\n\n  const divStyles: React.CSSProperties = {\n    width: window.innerWidth > 10000 ? \"70%\" : \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    padding: \"0 5rem\",\n    flexWrap: \"wrap\",\n    height: \"92vh\",\n    alignItems: \"center\"\n  };\n\n  const gamesList: Games[] = [\"chess\", \"checkers\", \"sketchio\"];\n\n  return (\n    <div style={divStyles}>\n      {gamesList.map(g => (\n        <GameCard gameName={g} key={g} />\n      ))}\n    </div>\n  );\n};\n\nexport default GamesScreen;\n","import { socketEmitEvents } from \"../../types/socketEvents\";\r\nimport { SocketState } from \"../../types/store/storeTypes\";\r\n\r\nclass SketchIO {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  socket: SocketState;\r\n  initialFillStyle: string;\r\n  initialStrokeStyle: string;\r\n  isPainting: boolean;\r\n  isFilling: boolean;\r\n\r\n  constructor(\r\n    canvas: HTMLCanvasElement,\r\n    context: CanvasRenderingContext2D,\r\n    socket: SocketState\r\n  ) {\r\n    this.canvas = canvas;\r\n    this.ctx = context;\r\n    this.socket = socket;\r\n    this.initialFillStyle = \"white\";\r\n    this.initialStrokeStyle = \"black\";\r\n    this.isPainting = false;\r\n    this.isFilling = false;\r\n    this.setInitialStyles();\r\n  }\r\n\r\n  toggleFillPaint = () => {\r\n    this.isPainting = !this.isPainting;\r\n    this.isFilling = !this.isFilling;\r\n  };\r\n\r\n  getPainting = () => this.isPainting;\r\n\r\n  getFilling = () => this.isFilling;\r\n\r\n  fill = (color?: string) => {\r\n    if (!color) {\r\n      this.ctx.fillStyle = this.initialFillStyle;\r\n    } else {\r\n      this.ctx.fillStyle = color;\r\n    }\r\n\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n  };\r\n\r\n  setInitialStyles = () => {\r\n    this.ctx.fillStyle = this.initialFillStyle;\r\n    this.ctx.strokeStyle = this.initialStrokeStyle;\r\n    this.fill(this.ctx.fillStyle);\r\n  };\r\n\r\n  changeCanvasColor = (color: string) => {\r\n    this.ctx.strokeStyle = color;\r\n    this.ctx.fillStyle = color;\r\n  };\r\n\r\n  beginPath = (x: number, y: number) => {\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(x, y);\r\n  };\r\n\r\n  drawPath = (x: number, y: number, color: string) => {\r\n    this.ctx.strokeStyle = color;\r\n    this.ctx.lineTo(x, y);\r\n    this.ctx.stroke();\r\n  };\r\n\r\n  onMouseMove = (e: MouseEvent) => {\r\n    let x = e.offsetX,\r\n      y = e.offsetY;\r\n\r\n    if (!this.isPainting) {\r\n      this.beginPath(x, y);\r\n      this.socket.emit(socketEmitEvents.BEGAN_PATH, { x, y });\r\n    } else {\r\n      this.drawPath(x, y, this.ctx.strokeStyle as string);\r\n      this.socket.emit(socketEmitEvents.STROKED_PATH, {\r\n        x,\r\n        y,\r\n        color: this.ctx.strokeStyle\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCanvasClick = () => {\r\n    if (this.isFilling) {\r\n      this.fill(this.ctx.fillStyle as string);\r\n      this.socket.emit(socketEmitEvents.STARTED_FILLING, { color: this.ctx.fillStyle });\r\n    }\r\n  };\r\n\r\n  setPaintingTrue = () => (this.isPainting = true);\r\n  setPaintingFalse = () => (this.isPainting = false);\r\n\r\n  enableCanvas = () => {\r\n    this.canvas.addEventListener(\"mousemove\", this.onMouseMove);\r\n    this.canvas.addEventListener(\"mousedown\", this.setPaintingTrue);\r\n    this.canvas.addEventListener(\"mouseup\", this.setPaintingFalse);\r\n    this.canvas.addEventListener(\"mouseleave\", this.setPaintingFalse);\r\n    this.canvas.addEventListener(\"click\", this.handleCanvasClick);\r\n    this.changeCanvasColor(\"white\");\r\n  };\r\n\r\n  disableCanvas = () => {\r\n    this.canvas.removeEventListener(\"mousemove\", this.onMouseMove);\r\n    this.canvas.removeEventListener(\"mousedown\", this.setPaintingTrue);\r\n    this.canvas.removeEventListener(\"mouseup\", this.setPaintingFalse);\r\n    this.canvas.removeEventListener(\"mouseleave\", this.setPaintingFalse);\r\n    this.canvas.removeEventListener(\"click\", this.handleCanvasClick);\r\n  };\r\n}\r\n\r\nexport default SketchIO;\r\n","import React from \"react\";\nimport CanvasComponent from \"../components/sketchio/CanvasComponent\";\nimport Chat from \"../components/allGames/Chat\";\nimport RoomId from \"../components/allGames/RoomId\";\nimport useWindowSize from \"../hooks/useWindowSize\";\nimport { chatStyles } from \"../styles/gameScreenStyles\";\nimport { RouteProps } from \"../types/routeProps\";\n\ninterface SketchIOScreenProps extends RouteProps {}\n\nconst SketchIOScreen: React.FC<SketchIOScreenProps> = ({ match }) => {\n  const [windowWidth] = useWindowSize();\n  const bigScreen = windowWidth > 1300;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        width: \"100%\",\n        minHeight: \"100vh\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        flexDirection: bigScreen ? \"row\" : \"column\"\n      }}\n    >\n      <div style={{ width: bigScreen ? \"75%\" : \"100%\" }}>\n        <CanvasComponent roomId={match.params.roomId as string} />\n      </div>\n      <div\n        style={{\n          ...chatStyles,\n          minWidth: bigScreen ? \"25%\" : \"50%\",\n          maxWidth: bigScreen ? \"25%\" : \"50%\",\n          marginTop: bigScreen ? 0 : \"3rem\"\n        }}\n      >\n        <RoomId roomId={match.params.roomId as string} />\n        <Chat />\n      </div>\n    </div>\n  );\n};\n\nexport default SketchIOScreen;\n","import React from \"react\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { makeStyles } from \"@material-ui/core\";\n\ninterface CircularGraphProps {\n  percentage: number;\n  color: string;\n}\n\nconst CircularGraph: React.FC<CircularGraphProps> = ({ percentage, color }) => {\n  const classes = makeStyles(t => ({\n    circle: {\n      \"& svg circle\": {\n        stroke: percentage !== 0 ? color : \"white\"\n      }\n    }\n  }))();\n\n  return (\n    <div>\n      <Box position=\"relative\" display=\"inline-flex\" className={classes.circle}>\n        <CircularProgress size=\"3rem\" variant=\"determinate\" value={percentage || 100} />\n        <Box\n          top={0}\n          left={0}\n          bottom={0}\n          right={0}\n          position=\"absolute\"\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Typography\n            variant=\"caption\"\n            component=\"div\"\n            color=\"initial\"\n          >{`${percentage.toFixed(0)}%`}</Typography>\n        </Box>\n      </Box>\n    </div>\n  );\n};\n\nexport default CircularGraph;\n","import React, { useState, useEffect } from \"react\";\n\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport CircularGraph from \"../components/user/CircularGraph\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport { axiosInstance } from \"../config/axiosConfig\";\nimport { ListSubheader } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: \"36ch\",\n      backgroundColor: \"#0B1622\",\n      borderRadius: \"0.25rem\",\n      boxShadow: \"0 0 5px gray\"\n    },\n    inline: {\n      display: \"inline\"\n    }\n  })\n);\n\ntype KeyNames = \"games_drawn\" | \"games_lost\" | \"games_started\" | \"games_won\";\n\ntype ApiResponse = {\n  [k in KeyNames]: number;\n};\n\ninterface StatsState {\n  chess: ApiResponse;\n  checkers: ApiResponse;\n}\n\nconst getUserData = async (username: string): Promise<StatsState> => {\n  const { data } = await axiosInstance.get(`/games/${username}`);\n\n  const object: StatsState = {\n    chess: {\n      games_won: data.chess_info.games_won,\n      games_lost: data.chess_info.games_lost,\n      games_drawn: data.chess_info.games_drawn,\n      games_started: data.chess_info.games_started\n    },\n    checkers: {\n      games_won: data.checkers_info.games_won,\n      games_lost: data.checkers_info.games_lost,\n      games_drawn: data.checkers_info.games_drawn,\n      games_started: data.checkers_info.games_started\n    }\n  };\n\n  return object;\n};\n\nconst Statistics: React.FC = () => {\n  const classes = useStyles();\n\n  const { user } = useTypedSelector(state => state);\n\n  const [statistics, setStatistics] = useState<StatsState>({} as StatsState);\n\n  useEffect(() => {\n    getUserData(user.username).then(stats => setStatistics(stats));\n  }, []);\n\n  const capitalize = (word: string) => {\n    return word\n      .split(\"_\")\n      .map(c => c[0].toUpperCase() + c.slice(1))\n      .join(\" \");\n  };\n\n  const getColor: { [k in KeyNames]: string } = {\n    games_won: \"#27ae60\",\n    games_lost: \"#e74c3c\",\n    games_drawn: \"#7f8c8d\",\n    games_started: \"#16a085\"\n  };\n\n  return (\n    <div\n      style={{\n        minHeight: \"92vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-around\"\n      }}\n    >\n      {Object.entries(statistics).map(\n        ([gameName, gameStatsObject]: [string, ApiResponse]) => (\n          <List\n            className={classes.root}\n            key={gameName}\n            subheader={\n              <ListSubheader\n                component=\"h1\"\n                style={{ color: \"inherit\", fontSize: \"1.2rem\", fontWeight: \"bold\" }}\n              >\n                {capitalize(gameName)}\n              </ListSubheader>\n            }\n          >\n            {Object.entries(gameStatsObject).map(([key, value]: [string, number]) => (\n              <>\n                <ListItem alignItems=\"flex-start\" key={key}>\n                  <ListItemAvatar>\n                    <CircularGraph\n                      percentage={\n                        gameStatsObject.games_started === 0\n                          ? 0\n                          : (value / gameStatsObject.games_started) * 100\n                      }\n                      color={getColor[key as KeyNames]}\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    style={{ marginLeft: \"1rem\" }}\n                    primary={capitalize(key)}\n                    secondary={\n                      <>\n                        <Typography\n                          component=\"span\"\n                          variant=\"body2\"\n                          className={classes.inline}\n                          style={{ color: getColor[key as KeyNames] }}\n                        >\n                          {value} out of {gameStatsObject.games_started}\n                        </Typography>\n                      </>\n                    }\n                  />\n                </ListItem>\n                <Divider variant=\"inset\" component=\"li\" />\n              </>\n            ))}\n          </List>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;\n","import { makeStyles } from \"@material-ui/core\";\n\nexport default makeStyles(theme => ({\n  root: {\n    \"& label.Mui-focused\": {\n      color: \"white\"\n    },\n    \"& label.Mui\": {\n      color: \"white !important\"\n    },\n    \"& .MuiInput-underline:after\": {\n      borderBottomColor: \"white\"\n    },\n    \"& .MuiInputBase-input.MuiOutlinedInput-input\": {\n      color: \"#fff !important\"\n    },\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"rgb(175, 175, 175)\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"rgb(200, 200, 200)\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"white\"\n      }\n    }\n  },\n  paper: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    borderColor: \"rgba(52, 152, 219,1.0)\",\n    color: \"white\",\n    borderWidth: \"3px\",\n    maxWidth: \"25%\",\n    paddingTop: \"0.5rem\",\n    paddingBottom: \"0.5rem\",\n    \"&:hover\": {\n      backgroundColor: \"rgba(52, 152, 219,0.6)\",\n      borderColor: \"#2980b9\"\n    }\n  },\n  formGroup: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    flexWrap: \"nowrap\",\n    marginTop: \"1rem\"\n  },\n  withoutLabel: {\n    marginTop: theme.spacing(3)\n  },\n  textField: {\n    width: \"49%\"\n  },\n  icon: {\n    fill: \"rgb(200, 200, 200) !important\"\n  }\n}));\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { FormControl, FormHelperText, IconButton } from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport useStyles from \"../styles/UserLoginStyles\";\nimport { RouteProps } from \"../types/routeProps\";\nimport routes, { routeNames } from \"../routes/router\";\nimport { userLoginAction } from \"../store/actions/userActions\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\n\ninterface UserLoginProps extends RouteProps {}\n\nconst UserLogin: React.FC<UserLoginProps> = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const { user } = useTypedSelector(state => state);\n\n  const classes = useStyles();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [formDetails, setFormDetails] = useState({\n    username: \"\",\n    password: \"\"\n  });\n\n  const handleChange = (key: string, value: string) => {\n    setFormDetails({\n      ...formDetails,\n      [key]: value\n    });\n  };\n\n  useEffect(() => {\n    if (user.token?.length) {\n      history.push(routes[routeNames.GAMES_SCREEN].path);\n    }\n  }, [user.token, history]);\n\n  const loginUser = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n\n    dispatch(userLoginAction(formDetails));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.root}>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <div>\n            <FormControl style={{ width: \"100%\" }} variant=\"outlined\">\n              <InputLabel htmlFor=\"username\">Username</InputLabel>\n              <OutlinedInput\n                id=\"username\"\n                type=\"text\"\n                required\n                value={formDetails.username}\n                onChange={e => handleChange(\"username\", e.target.value)}\n                labelWidth={70}\n                fullWidth\n                autoComplete=\"username\"\n              />\n              {formDetails.username.trim().length === 0 && (\n                <FormHelperText error>Username cannot be empy</FormHelperText>\n              )}\n            </FormControl>\n          </div>\n\n          <div style={{ marginTop: \"1rem\" }}>\n            <FormControl style={{ width: \"100%\" }} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-password\">Password*</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                required\n                type={showPassword ? \"text\" : \"password\"}\n                value={formDetails.password}\n                onChange={e => handleChange(\"password\", e.target.value)}\n                autoComplete=\"new-password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      edge=\"end\"\n                    >\n                      {showPassword ? (\n                        <Visibility className={classes.icon} />\n                      ) : (\n                        <VisibilityOff className={classes.icon} />\n                      )}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={70}\n              />\n              {formDetails.password.trim().length === 0 && (\n                <FormHelperText error>Password is required</FormHelperText>\n              )}\n            </FormControl>\n          </div>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"outlined\"\n            color=\"default\"\n            className={classes.submit}\n            onClick={e => loginUser(e)}\n          >\n            Sign In\n          </Button>\n        </form>\n      </div>\n      <div>\n        Don't have an account?{\" \"}\n        <Link to=\"/register\">\n          <Button color=\"primary\" variant=\"contained\">\n            Register\n          </Button>\n        </Link>\n      </div>\n    </Container>\n  );\n};\n\nexport default UserLogin;\n","import React from \"react\";\n\ninterface ProfilePicInterface {\n  src: string;\n  navbar: boolean;\n  width?: string;\n  height?: string;\n  borderRadius?: string;\n}\n\nconst ProfilePic: React.FC<ProfilePicInterface> = ({\n  src,\n  navbar,\n  width,\n  height,\n  borderRadius\n}) => {\n  const imgSrc = src?.length > 0 ? src : \"defaultPic\";\n\n  return (\n    <img\n      src={imgSrc}\n      width={width}\n      height={height}\n      style={{\n        objectFit: \"cover\",\n        borderRadius\n      }}\n    />\n  );\n};\n\nProfilePic.defaultProps = {\n  width: \"40px\",\n  height: \"40px\",\n  borderRadius: \"50%\"\n};\n\nexport default ProfilePic;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nimport useStyles from \"../../styles/UserLoginStyles\";\nimport { FormControl, FormHelperText, IconButton, makeStyles } from \"@material-ui/core\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport ProfilePic from \"./ProfilePic\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { axiosInstance } from \"../../config/axiosConfig\";\nimport { useDispatch } from \"react-redux\";\nimport { updateProfilePicAction } from \"../../store/actions/userActions\";\n\nexport type UserInformation = {\n  username: string;\n  password: string;\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  profilePictureUrl: string;\n};\n\ninterface UserDetailsProps {\n  isForRegister: boolean;\n  submitHandler: (userInfo: UserInformation) => Promise<void>;\n  userInfo?: UserInformation;\n}\n\nconst useMoreStyles = makeStyles(() => ({\n  editIconContainer: {\n    padding: \"1rem\",\n    position: \"relative\"\n  },\n\n  editIcon: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    \"&:hover\": {\n      fill: \"white\",\n      cursor: \"pointer\"\n    }\n  }\n}));\n\nconst UserDetails: React.FC<UserDetailsProps> = ({\n  isForRegister,\n  userInfo,\n  submitHandler\n}) => {\n  const classes = useStyles();\n  const moreClasses = useMoreStyles();\n\n  const dispatch = useDispatch();\n\n  const { user } = useTypedSelector(state => state);\n\n  const [showPassword, setShowPassword] = useState({ password: false, confirm: false });\n  const [wasUsernameChanged, setWasUsernameChanged] = useState(false);\n\n  const [formDetails, setFormDetails] = useState<UserInformation>({\n    username: userInfo?.username || \"\",\n    password: userInfo?.password || \"\",\n    confirmPassword: userInfo?.confirmPassword || \"\",\n    firstName: userInfo?.firstName || \"\",\n    lastName: userInfo?.lastName || \"\",\n    email: userInfo?.email || \"\",\n    profilePictureUrl: userInfo?.profilePictureUrl || \"\"\n  });\n\n  const [passwordsMatch, setPasswordsMatch] = useState(true);\n\n  useEffect(() => {\n    setPasswordsMatch(formDetails.password === formDetails.confirmPassword);\n  }, [formDetails.confirmPassword, formDetails.password]);\n\n  const handleChange = (key: string, value: string) => {\n    if (key === \"username\") {\n      setWasUsernameChanged(true);\n    }\n\n    setFormDetails({\n      ...formDetails,\n      [key]: value\n    });\n  };\n\n  const areFormDetailsValid = (): boolean => {\n    if (!passwordsMatch) return false;\n    if (formDetails.username.trim().length === 0) return false;\n\n    return true;\n  };\n\n  const registerUser = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n\n    if (areFormDetailsValid()) {\n      submitHandler(formDetails);\n    } else {\n      console.log(\"nooooooooo\");\n    }\n  };\n\n  const openFileUploader = () => {\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"file\");\n    input.click();\n\n    input.onchange = async (e: Event) => {\n      e.preventDefault();\n\n      if (!e || !e.target) return;\n\n      let selectedFile = (e.target as HTMLInputElement).files;\n\n      if (!selectedFile) return;\n\n      // Create an object of formData\n      const formData = new FormData();\n\n      // Update the formData object\n      formData.append(\"myFile\", selectedFile[0], selectedFile[0].name);\n\n      // Details of the uploaded file\n      console.log(selectedFile);\n\n      // for (let i of formData.entries()) {\n      //   console.log(i);\n      // }\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n          \"content-type\": \"multipart/formdata\"\n        }\n      };\n\n      try {\n        // Request made to the backend api\n        // Send formData object\n        const response = await axiosInstance.post(\n          `/upload/profile-picture`,\n          formData,\n          config\n        );\n\n        if (response.data.success) {\n          console.log(response.data);\n          dispatch(updateProfilePicAction(response.data.profilePictureUrl));\n          // toastrSuccess(\"Profile Picture Changed\", response.data.message);\n        } else {\n          // toastrError(\"Error\", response.data.message);\n        }\n      } catch (err) {\n        // toastrError(\"Error\", err);\n      }\n    };\n  };\n\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"xs\"\n      className={classes.root}\n      style={{ minWidth: \"70%\" }}\n    >\n      {/* <Alert severity=\"info\">\n        <AlertTitle>Info</AlertTitle>\n        This is an info alert — <strong>check it out!</strong>\n      </Alert> */}\n      <CssBaseline />\n      <div className={classes.paper}>\n        {!userInfo ? (\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n        ) : (\n          <div className={moreClasses.editIconContainer}>\n            <EditIcon onClick={openFileUploader} className={moreClasses.editIcon} />\n            {userInfo.profilePictureUrl.length ? (\n              <ProfilePic\n                src={userInfo.profilePictureUrl}\n                navbar={false}\n                width=\"125\"\n                height=\"125\"\n              />\n            ) : (\n              <AccountCircleIcon style={{ width: \"125\", height: \"125\" }} />\n            )}\n          </div>\n        )}\n        <Typography component=\"h1\" variant=\"h5\">\n          {isForRegister ? \"Sign Up\" : \"Profile\"}\n        </Typography>\n        <form className={classes.form}>\n          <div className={classes.formGroup}>\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"username\">Username</InputLabel>\n              <OutlinedInput\n                id=\"username\"\n                type=\"text\"\n                required\n                value={formDetails.username}\n                onChange={e => handleChange(\"username\", e.target.value)}\n                labelWidth={70}\n                fullWidth\n                autoComplete=\"username\"\n              />\n              {wasUsernameChanged && formDetails.username.trim().length === 0 && (\n                <FormHelperText error>Username cannot be empy</FormHelperText>\n              )}\n            </FormControl>\n\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"email\">Email</InputLabel>\n              <OutlinedInput\n                id=\"email\"\n                type=\"text\"\n                required\n                value={formDetails.email}\n                onChange={e => handleChange(\"email\", e.target.value)}\n                labelWidth={70}\n                fullWidth\n                autoComplete=\"email\"\n              />\n            </FormControl>\n          </div>\n\n          <div className={classes.formGroup}>\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-password\">New Password</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-password\"\n                required\n                type={showPassword.password ? \"text\" : \"password\"}\n                value={formDetails.password}\n                onChange={e => handleChange(\"password\", e.target.value)}\n                autoComplete=\"new-password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() =>\n                        setShowPassword({\n                          ...showPassword,\n                          password: !showPassword.password\n                        })\n                      }\n                      edge=\"end\"\n                    >\n                      {showPassword.password ? (\n                        <Visibility className={classes.icon} />\n                      ) : (\n                        <VisibilityOff className={classes.icon} />\n                      )}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={70}\n              />\n              {!passwordsMatch && (\n                <FormHelperText error>Passwords do not match</FormHelperText>\n              )}\n            </FormControl>\n\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-confirm-password\">\n                Confirm New Password\n              </InputLabel>\n              <OutlinedInput\n                required\n                id=\"outlined-adornment-confirm-password\"\n                type={showPassword.confirm ? \"text\" : \"password\"}\n                value={formDetails.confirmPassword}\n                onChange={e => handleChange(\"confirmPassword\", e.target.value)}\n                autoComplete=\"new-password\"\n                endAdornment={\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() =>\n                        setShowPassword({\n                          ...showPassword,\n                          confirm: !showPassword.confirm\n                        })\n                      }\n                      edge=\"end\"\n                    >\n                      {showPassword.confirm ? (\n                        <Visibility className={classes.icon} />\n                      ) : (\n                        <VisibilityOff className={classes.icon} />\n                      )}\n                    </IconButton>\n                  </InputAdornment>\n                }\n                labelWidth={70}\n              />\n              {!passwordsMatch && (\n                <FormHelperText error>Passwords do not match</FormHelperText>\n              )}\n            </FormControl>\n          </div>\n\n          <div className={classes.formGroup}>\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-first-name\">First Name</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-first-name\"\n                type=\"text\"\n                value={formDetails.firstName}\n                onChange={e => handleChange(\"firstName\", e.target.value)}\n                labelWidth={70}\n              />\n            </FormControl>\n\n            <FormControl className={classes.textField} variant=\"outlined\">\n              <InputLabel htmlFor=\"outlined-adornment-last-name\">Last Name</InputLabel>\n              <OutlinedInput\n                id=\"outlined-adornment-last-name\"\n                type=\"text\"\n                value={formDetails.lastName}\n                onChange={e => handleChange(\"lastName\", e.target.value)}\n                labelWidth={70}\n              />\n            </FormControl>\n          </div>\n\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"outlined\"\n              color=\"default\"\n              className={classes.submit}\n              onClick={e => registerUser(e)}\n            >\n              {isForRegister ? \"Register\" : \"Submit Edit\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n\n      {isForRegister && (\n        <div>\n          Already have an account?{\" \"}\n          <Link to=\"/\">\n            <Button color=\"primary\" variant=\"contained\">\n              Login\n            </Button>\n          </Link>\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default UserDetails;\n","import React from \"react\";\nimport UserDetails, { UserInformation } from \"../components/user/UserDetails\";\nimport { axiosInstance } from \"../config/axiosConfig\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\n\nconst UserProfileScreen: React.FC = () => {\n  const { user } = useTypedSelector(state => state);\n\n  const editUserInfo = async (formDetails: UserInformation) => {\n    const createRequest = await axiosInstance.put(\"/user/editdetails\", formDetails, {\n      headers: {\n        Authorization: `Bearer ${user.token}`\n      }\n    });\n    console.log(createRequest);\n  };\n\n  return (\n    <div style={{ height: \"92vh\", display: \"flex\", alignItems: \"center\" }}>\n      <UserDetails\n        isForRegister={false}\n        userInfo={{ ...user, password: \"\", confirmPassword: \"\" }}\n        submitHandler={editUserInfo}\n      />\n    </div>\n  );\n};\n\nexport default UserProfileScreen;\n","import React from \"react\";\nimport UserDetails, { UserInformation } from \"../components/user/UserDetails\";\n\nimport { axiosInstance } from \"../config/axiosConfig\";\nimport { RouteProps } from \"../types/routeProps\";\n\ninterface UserRegisterProps extends RouteProps {}\n\nconst UserRegister: React.FC<UserRegisterProps> = () => {\n  const registerUser = async (formDetails: UserInformation) => {\n    const createRequest = await axiosInstance.post(\"/user/register\", formDetails);\n    console.log(createRequest);\n  };\n\n  return (\n    <div style={{ height: \"92vh\", display: \"flex\", alignItems: \"center\" }}>\n      <UserDetails isForRegister submitHandler={registerUser} />\n    </div>\n  );\n};\n\nexport default UserRegister;\n","import CheckersPlayBoard from \"../components/checkers/CheckersPlayBoard\";\nimport CheckersTestBoard from \"../components/checkers/CheckersTest\";\nimport ChessPlayBoard from \"../components/chess/ChessPlayBoard\";\nimport ChessBoardTest from \"../components/chess/ChessTest\";\nimport CheckersScreen from \"../views/CheckersScreen\";\nimport ChessScreen from \"../views/ChessScreen\";\nimport GamesScreen from \"../views/GamesScreen\";\nimport SketchIOScreen from \"../views/SketchIOScreen\";\nimport Statistics from \"../views/Statistics\";\nimport UserLogin from \"../views/UserLogin\";\nimport UserProfileScreen from \"../views/UserProfileScreen\";\nimport UserRegister from \"../views/UserRegister\";\n\nexport const routeNames = Object.freeze({\n  LOGIN: \"LOGIN\",\n  REGISTER: \"REGISTER\",\n  PROFILE: \"PROFILE\",\n  STATISTICS: \"STATISTICS\",\n  GAMES_SCREEN: \"GAMES_SCREEN\",\n  CHECKERS_SCREEN: \"CHECKERS_SCREEN\",\n  CHESS_SCREEN: \"CHESS_SCREEN\",\n  SKETCHIO_SCREEN: \"SKETCHIO_SCREEN\",\n  CHECKERS_TEST: \"CHECKERS_TEST\",\n  CHESS_TEST: \"CHESS_TEST\",\n  CHESS_PLAY: \"CHESS_PLAY\",\n  CHECKERS_PLAY: \"CHECKERS_PLAY\"\n});\n\nconst routes = {\n  [routeNames.LOGIN]: {\n    name: routeNames.LOGIN,\n    path: \"/\",\n    component: UserLogin\n  },\n  [routeNames.REGISTER]: {\n    name: routeNames.REGISTER,\n    path: \"/register\",\n    component: UserRegister\n  },\n  [routeNames.GAMES_SCREEN]: {\n    name: routeNames.GAMES_SCREEN,\n    path: \"/games\",\n    component: GamesScreen\n  },\n  [routeNames.CHESS_TEST]: {\n    name: \"chessTest\",\n    path: \"/chess/analyze\",\n    component: ChessBoardTest\n  },\n  [routeNames.CHESS_PLAY]: {\n    name: \"CHESS_PLAY\",\n    path: \"/chess/test\",\n    component: ChessPlayBoard\n  },\n  [routeNames.CHECKERS_PLAY]: {\n    name: \"CHESSCHECKERS_PLAY_PLAY\",\n    path: \"/checkers/test\",\n    component: CheckersPlayBoard\n  },\n  [routeNames.CHECKERS_SCREEN]: {\n    name: routeNames.CHECKERS_SCREEN,\n    path: \"/checkers/:roomId\",\n    component: CheckersScreen\n  },\n  [routeNames.CHESS_SCREEN]: {\n    name: routeNames.CHESS_SCREEN,\n    path: \"/chess/:roomId\",\n    component: ChessScreen\n  },\n  [routeNames.SKETCHIO_SCREEN]: {\n    name: routeNames.SKETCHIO_SCREEN,\n    path: \"/sketchio/:roomId\",\n    component: SketchIOScreen\n  },\n  [routeNames.CHECKERS_TEST]: {\n    name: \"checkersTest\",\n    path: \"/checkerstest\",\n    component: CheckersTestBoard\n  },\n  [routeNames.PROFILE]: {\n    name: \"profile\",\n    path: \"/profile\",\n    component: UserProfileScreen\n  },\n  [routeNames.STATISTICS]: {\n    name: \"stats\",\n    path: \"/stats\",\n    component: Statistics\n  }\n};\n\nexport default routes;\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { RouteProps } from \"../types/routeProps\";\n\nimport \"../styles/DropdownStyles.css\";\n\ninterface DropdownProps extends RouteProps {\n  dropdownItems: { path: string; text: string }[];\n  type: \"chess\" | \"checkers\";\n  close: (type: \"chess\" | \"checkers\") => void;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({ dropdownItems, location, close, type }) => {\n  const handleClick = () => {\n    close(type);\n  };\n\n  return (\n    <div className=\"dropdown\">\n      {dropdownItems.map((item, i) => (\n        <Link\n          onClick={handleClick}\n          to={item.path}\n          style={{ textDecoration: \"none\", color: \"inherit\" }}\n          key={i}\n        >\n          <div\n            className={\n              \"dropdown-item\" + `${location.pathname === item.path ? \" selected\" : \"\"}`\n            }\n            style={{ width: \"100%\", height: \"100%\" }}\n          >\n            {item.text}\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default withRouter(Dropdown);\n","import React, { useState } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport { RouteProps } from \"../types/routeProps\";\nimport ProfilePic from \"./user/ProfilePic\";\nimport ArrowDropDownRoundedIcon from \"@material-ui/icons/ArrowDropDownRounded\";\nimport ExitToAppRoundedIcon from \"@material-ui/icons/ExitToAppRounded\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { ListItem } from \"@material-ui/core\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport \"../styles/NavBarStyles.css\";\nimport routes, { routeNames } from \"../routes/router\";\nimport { userLogoutAction } from \"../store/actions/userActions\";\nimport { useDispatch } from \"react-redux\";\nimport Dropdown from \"./Dropdown\";\n\ninterface NavBarProps extends RouteProps {}\n\nconst NavBar: React.FC<NavBarProps> = ({ history }) => {\n  const dispatch = useDispatch();\n  const { user } = useTypedSelector(state => state);\n\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [showDropdown, setShowDropdown] = useState({ chess: false, checkers: false });\n\n  const logoutAction = () => {\n    setShowProfileModal(false);\n    dispatch(userLogoutAction());\n    history.push(\"/\");\n  };\n\n  const closeDropdown = (type: \"chess\" | \"checkers\") => {\n    setShowDropdown(old => ({ ...old, [type]: !old[type] }));\n  };\n\n  const chessDropdownItems = [\n    { text: \"Play Board\", path: routes[routeNames.CHESS_PLAY].path }\n  ];\n\n  const checkersDropdownItems = [\n    { text: \"Play Board\", path: routes[routeNames.CHECKERS_PLAY].path }\n  ];\n\n  // can only have the analysis board available to them if they're logged in\n  if (user?.username) {\n    chessDropdownItems.unshift({\n      text: \"Analyze Games\",\n      path: routes[routeNames.CHESS_TEST].path\n    });\n    checkersDropdownItems.unshift({\n      text: \"Analyze Games\",\n      path: routes[routeNames.CHECKERS_TEST].path\n    });\n  }\n\n  return (\n    <nav\n      className=\"navbar-container\"\n      style={{\n        justifyContent: user?.username ? \"space-between\" : \"space-around\"\n      }}\n    >\n      <div className=\"navbar-logo\">\n        <Link\n          to={\n            user?.username\n              ? routes[routeNames.GAMES_SCREEN].path\n              : routes[routeNames.LOGIN].path\n          }\n          className=\"react-link\"\n        >\n          <h3>Multiplayer Games</h3>\n        </Link>\n      </div>\n\n      <div className=\"navbar-navlink\" style={{ position: \"relative\" }}>\n        <div\n          className={`nav-link react-link ${\n            showDropdown.chess ? \"nav-link-active\" : \"\"\n          } `}\n          onClick={() => closeDropdown(\"chess\")}\n        >\n          Play Chess\n        </div>\n        {showDropdown.chess && (\n          <Dropdown\n            dropdownItems={chessDropdownItems}\n            type=\"chess\"\n            close={closeDropdown}\n          />\n        )}\n      </div>\n\n      <div className=\"navbar-navlink\" style={{ position: \"relative\" }}>\n        <div\n          className={`nav-link react-link ${\n            showDropdown.checkers ? \"nav-link-active\" : \"\"\n          } `}\n          onClick={() => closeDropdown(\"checkers\")}\n        >\n          Play Checkers\n        </div>\n        {showDropdown.checkers && (\n          <Dropdown\n            dropdownItems={checkersDropdownItems}\n            type=\"checkers\"\n            close={closeDropdown}\n          />\n        )}\n      </div>\n\n      {user.username && (\n        <div className=\"nav-profile-container\">\n          <div\n            className=\"nav-profile-icon\"\n            onClick={() => setShowProfileModal(!showProfileModal)}\n          >\n            {user.profilePictureUrl.length > 0 ? (\n              <ProfilePic src={user.profilePictureUrl} navbar />\n            ) : (\n              <AccountCircleIcon />\n            )}\n            <ArrowDropDownRoundedIcon />\n          </div>\n\n          {showProfileModal && (\n            <div className=\"nav-profile-modal\">\n              <ListItem className=\"d-flex align-items-center profile-list-group-item\">\n                <AccountCircleIcon style={{ fill: \"#0984e3\" }} />\n                <span className=\"ml-2\">\n                  <Link\n                    to={`/profile`}\n                    onClick={() => setShowProfileModal(false)}\n                    className=\"react-link\"\n                  >\n                    {user.username}\n                  </Link>\n                </span>\n              </ListItem>\n\n              <ListItem className=\"d-flex align-items-center profile-list-group-item\">\n                <BarChartIcon style={{ fill: \"#fff\" }} />\n                <span className=\"ml-2\">\n                  <Link\n                    to={`/stats`}\n                    onClick={() => setShowProfileModal(false)}\n                    className=\"react-link\"\n                  >\n                    Statistics\n                  </Link>\n                </span>\n              </ListItem>\n\n              <ListItem\n                onClick={logoutAction}\n                className=\"d-flex align-items-center profile-list-group-item\"\n              >\n                <ExitToAppRoundedIcon style={{ fill: \"red\" }} />\n                <span className=\"ml-2\">\n                  <Link to=\"/\" className=\"react-link\">\n                    Logout\n                  </Link>\n                </span>\n              </ListItem>\n            </div>\n          )}\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default withRouter(NavBar);\n","import React from \"react\";\n\nimport routes from \"./routes/router\";\nimport { Route, Switch } from \"react-router\";\nimport NavBar from \"./components/NavBar\";\n\nconst App: React.FC = () => {\n  return (\n    <div\n      className=\"App\"\n      style={{\n        minWidth: \"100%\",\n        minHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\"\n      }}\n    >\n      <NavBar />\n      <Switch>\n        {Object.values(routes).map(route => (\n          <Route\n            exact\n            path={route.path}\n            render={routeProps => <route.component {...routeProps} />}\n            key={route.name}\n          />\n        ))}\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import { ActionNames } from \"../../types/store/actionNames\";\nimport { UserActions } from \"../../types/store/actionTypes\";\nimport { UserState } from \"../../types/store/storeTypes\";\n\nconst initialState: UserState = {\n  username: \"\",\n  token: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  id: -1,\n  profilePictureUrl: \"\"\n};\n\nexport const userReducer = (\n  state: UserState = initialState,\n  action: UserActions\n): UserState => {\n  switch (action.type) {\n    case ActionNames.USER_LOGIN:\n      // log the user in\n      localStorage.setItem(\"user\", JSON.stringify(action.payload));\n      return action.payload;\n\n    case ActionNames.UPDATE_USER_SOCKET_DETAILS:\n      return action.payload;\n\n    case ActionNames.UPDATE_USER_PROFILE_PICTURE:\n      return {\n        ...state,\n        profilePictureUrl: action.payload\n      };\n\n    case ActionNames.USER_LOGOUT:\n      localStorage.clear();\n      return {} as UserState;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { socketReducer } from \"./socketReducers\";\nimport { userReducer } from \"./userReducer\";\n\nconst combinedReducers = combineReducers({\n  user: userReducer,\n  socket: socketReducer\n});\n\nexport type RootState = ReturnType<typeof combinedReducers>;\n\nexport default combinedReducers;\n","import { ActionNames } from \"../../types/store/actionNames\";\nimport { SetSocketAction } from \"../../types/store/actionTypes\";\nimport { SocketState } from \"../../types/store/storeTypes\";\n\nexport const socketReducer = (\n  state: SocketState | null = null,\n  action: SetSocketAction\n): SocketState | null => {\n  switch (action.type) {\n    case ActionNames.SET_SOCKET:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, createStore } from \"redux\";\nimport combinedReducers from \"./reducers/combinedReducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { UserState } from \"../types/store/storeTypes\";\nimport { getFromLocalStorage } from \"../helpers/storeHelpers\";\n\nconst initialUserState = getFromLocalStorage<UserState>(\"user\");\n\nconst initialState = {\n  user: initialUserState,\n  socket: null\n};\n\nconst store = createStore(\n  combinedReducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","export const getFromLocalStorage = <Type>(key: string): Type => {\n  const item = localStorage.getItem(key);\n\n  if (!item) return {} as Type;\n\n  return JSON.parse(item) as Type;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}